[{"id":"703f4458.ff2d1c","type":"tab","label":"WatchMon","disabled":false,"info":""},{"id":"f9c30ba8.6dc1b8","type":"udp in","z":"703f4458.ff2d1c","name":"listener","iface":"","port":"18542","ipv":"udp4","multicast":"false","group":"","datatype":"buffer","x":100,"y":53,"wires":[["41934ac.b770eb4"]]},{"id":"41934ac.b770eb4","type":"function","z":"703f4458.ff2d1c","name":"All Message Type numbers to Topic","func":"msg.Topic = (msg.payload[2].toString(16).toUpperCase() + msg.payload[1].toString(16).toUpperCase())\nreturn\tmsg;\t\t\n\t\t\t\n","outputs":1,"noerr":0,"x":240,"y":360,"wires":[["59473f21.a99ea","cb97ce1c.59851"]]},{"id":"59473f21.a99ea","type":"switch","z":"703f4458.ff2d1c","name":"Split the messages by type","property":"Topic","propertyType":"msg","rules":[{"t":"eq","v":"415A","vt":"str"},{"t":"eq","v":"4232","vt":"str"},{"t":"eq","v":"3E32","vt":"str"},{"t":"eq","v":"3F33","vt":"str"},{"t":"eq","v":"4732","vt":"str"},{"t":"eq","v":"4932","vt":"str"},{"t":"eq","v":"6131","vt":"str"},{"t":"eq","v":"5732","vt":"str"},{"t":"eq","v":"4032","vt":"str"},{"t":"eq","v":"5432","vt":"str"},{"t":"eq","v":"7857","vt":"str"},{"t":"eq","v":"5632","vt":"str"},{"t":"eq","v":"4A35","vt":"str"},{"t":"eq","v":"4B35","vt":"str"},{"t":"eq","v":"4C33","vt":"str"},{"t":"eq","v":"4D33","vt":"str"},{"t":"eq","v":"5334","vt":"str"},{"t":"eq","v":"4F33","vt":"str"},{"t":"eq","v":"5033","vt":"str"},{"t":"eq","v":"5158","vt":"str"},{"t":"eq","v":"5258","vt":"str"},{"t":"eq","v":"4E58","vt":"str"},{"t":"eq","v":"5831","vt":"str"},{"t":"eq","v":"6831","vt":"str"},{"t":"eq","v":"5431","vt":"str"},{"t":"eq","v":"4732","vt":"str"},{"t":"eq","v":"4d34","vt":"str"},{"t":"eq","v":"6132","vt":"str"}],"checkall":"true","repair":false,"outputs":28,"x":220,"y":1240,"wires":[["f28d7b2.19b3588"],["4988e8bd.552b28"],["e12500e9.20d82"],["d683f73e.cef638"],[],["d51287cf.c303d8"],["6f7a507b.11767"],["21bbdc44.361ab4"],["78113a63.308b74"],["39e3bf5e.8e903"],["994ddadf.f0a3e8"],["52f1bf25.ba178"],["7eae0fb4.a000b"],["546b2ffc.2dc2d"],["a096b38a.31d4"],["43c64246.d3347c"],["1fc37c79.13c0f4"],["4454fbeb.58fc54"],["8cf0163a.2f11c8"],["647512d4.ff515c"],["7a381282.4c466c"],["f05f8e2e.5dd4a"],["96dc58a4.2a69c8"],["834b7c49.c4571"],["e8363d9f.a19bc"],["e765d69d.7677a8"],["806fb617.a32ad8"],["5b2d3d18.595e24"]]},{"id":"9cec54bc.9576c8","type":"debug","z":"703f4458.ff2d1c","name":"","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","x":1330,"y":520,"wires":[]},{"id":"88e465ed.53d958","type":"debug","z":"703f4458.ff2d1c","name":"","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","x":1330,"y":1420,"wires":[]},{"id":"ca067764.010408","type":"debug","z":"703f4458.ff2d1c","name":"","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","x":1330,"y":420,"wires":[]},{"id":"27cd995a.5a7766","type":"debug","z":"703f4458.ff2d1c","name":"","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","x":1330,"y":220,"wires":[]},{"id":"ac674dac.128c5","type":"debug","z":"703f4458.ff2d1c","name":"","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","x":1330,"y":2520,"wires":[]},{"id":"e2ce7e39.7236d","type":"debug","z":"703f4458.ff2d1c","name":"","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","x":1330,"y":1520,"wires":[]},{"id":"a16b9d82.b0c72","type":"debug","z":"703f4458.ff2d1c","name":"","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","x":1330,"y":2420,"wires":[]},{"id":"994ddadf.f0a3e8","type":"function","z":"703f4458.ff2d1c","name":"Msg_7857_HwShuntMetrics","func":"var Packet = global.get('binary_parser');\nvar buf = msg.payload;\n\nvar typea = new Packet()\n\t\t.skip(8)\n\t\t.uint8('ShuntSocCycles')  \n\t\t.uint32le('RecentTimeAcculmSave') \t// Epoch\n\t\t.uint32le('RecentTimeSocLoRecal') \t// Epoch\n\t\t.uint32le('RecentTimeSocHiRecal') \t// Epoch\n\t\t.uint32le('RecentTimeSocCountLo') \t// Epoch\n\t\t.uint32le('RecentTimeSocCountHi') \t// Epoch\n\t\t.uint8(  'hasShuntSocCountLo') \t\t// boolean 0 = Off , 1 = On\n\t\t.uint8(  'hasShuntSocCountHi') \t\t// boolean 0 = Off , 1 = On\n\t\t.int16le('EstDurationToFullmins') \n\t\t.int16le('EstDurationToEmptymins') \n\t\t.floatle('ShuntAcculmAvgCharge',\t{ formatter: (x) => {return x/1000;}})\t// Ah\n\t\t.floatle('ShuntAcculmAvgDischg',\t{ formatter: (x) => {return x/1000;}})\t// Ah\n\t\t.floatle('ShuntAcculmAvgNett',\t\t{ formatter: (x) => {return x/1000;}})\t// Ah\n\t\t.uint32le('ShuntSerialNo') \n\t\t.uint32le('ShuntManuCode') \n\t\t.int16le('ShuntPartNum')\n\t\t.int16le('ShuntVersCode')\n\t\t.string('ShuntPns1', \t\t\t\t{ encoding: 'ascii', length: 8 })\n\t\t.string('ShuntPns2', \t\t\t\t{ encoding: 'ascii', length: 8 })\n\n  \nmsg.payload = typea.parse(buf);\n\n// convert date(s)\nmsg.payload.RecentTimeAcculmSave = new Date(msg.payload.RecentTimeAcculmSave*1000);\nmsg.payload.RecentTimeSocLoRecal = new Date(msg.payload.RecentTimeSocLoRecal*1000);\nmsg.payload.RecentTimeSocHiRecal = new Date(msg.payload.RecentTimeSocHiRecal*1000);\nmsg.payload.RecentTimeSocCountLo = new Date(msg.payload.RecentTimeSocCountLo*1000);\nmsg.payload.RecentTimeSocCountHi = new Date(msg.payload.RecentTimeSocCountHi*1000);\n\nreturn msg;","outputs":1,"noerr":0,"x":960,"y":1120,"wires":[["cb5e2dc4.c002b"]]},{"id":"cb5e2dc4.c002b","type":"debug","z":"703f4458.ff2d1c","name":"","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","x":1330,"y":1120,"wires":[]},{"id":"d683f73e.cef638","type":"function","z":"703f4458.ff2d1c","name":"Msg_3f33_StatusFast","func":"var Packet = global.get('binary_parser');\nvar buf = msg.payload;\n\nvar typea = new Packet()\n\t\t.skip(8)\n\t\t.uint8('CmuPollerMode') \t    \n\t\t.uint8('CmuTxAckCount')            // Cellmon TX Acknowledgement Count\n\t\t.uint8('CmuTxOpStatusNodeId')      // Cellmon TX Operating Status Node ID\n\t\t.uint8('CmuTxOpStatusUSN')         // Cellmon TX Operating Status Universal Serial Number\n\t\t.uint8('CmuTxOpParamNodeId')       // Cellmon TX Parameter Node ID\n\t\t.int16le('GroupMinCellVolt',\t\t{ formatter: (x) => {return x/1000;}})\n\t\t.int16le('GroupMaxCellVolt',\t\t{ formatter: (x) => {return x/1000;}})\t\t\n\t\t.uint8('GroupMinCellTemp',\t\t\t{ formatter: (x) => {return x-40;}}) // temperature ºC\n\t\t.uint8('GroupMaxCellTemp',\t\t\t{ formatter: (x) => {return x-40;}}) // temperature ºC\n\t\t.uint8('CmuRxOpStatusNodeId')\n\t\t.uint8('CmuRxOpStatusGroupAck')\n\t\t.uint8('CmuRxOpStatusUSN')\n\t\t.uint8('CmuRxOpParamNodeId')\n\t\t.uint8('SystemOpStatus') \n\t\t.uint8('SystemAuthMode') \n\t\t.int16le('SupplyVolt',\t\t\t\t{ formatter: (x) => {return x/100;}})\n\t\t.uint8('AmbientTemp',\t\t\t\t{ formatter: (x) => {return x-40;}})   // temperature ºC\n\t\t.uint32le('SystemTime') // Epoch\n\t\t.uint8('ShuntSOC', \t\t\t\t\t{ formatter: (x) => {return x/2-5;}})  // percent\n\t\t.uint8('ShuntTemp',\t\t\t\t\t{ formatter: (x) => {return x-40;}})   // temperature ºC\n\t\t.floatle('NomCapacityToFull',\t\t{ formatter: (x) => {return x/1000;}}) // Ah\n\t\t.floatle('NomCapacityToEmpty',\t\t{ formatter: (x) => {return x/1000;}}) // Ah\n\t\t.uint8('ShuntPollerMode') \n\t\t.uint8('ShuntStatus') /* Choices\n\t\t\t\tIdle Start = 0,\n\t\t\t\tIdle = 1,\n\t\t\t\tSync Start = 2,\n\t\t\t\tSync Running = 3,\n\t\t\t\tNormal = 4,\n\t\t\t\tShuntMon2 SetupStart = 5,\n\t\t\t\tShuntMon2 SetupRunning = 6,\n\t\t\t\tShuntMon2 Normal = 7, */\n\t\t.uint8('hasShuntLoSocRecal')\t\t// boolean 0 = Off , 1 = On\n\t\t.uint8('hasShuntHiSocRecal') \t\t// boolean 0 = Off , 1 = On\n\t\t//  shunt.hasShuntOkSocRange = !(shunt.hasShuntLoSocRecal || shunt.hasShuntHiSocRecal);\n\t\t.uint8('ExpansionOutputFet5') \t\t// boolean 0 = Off , 1 = On\n\t\t.uint8('ExpansionOutputFet6') \t\t// boolean 0 = Off , 1 = On\n\t\t.uint8('ExpansionOutputFet7') \t\t// boolean 0 = Off , 1 = On\n\t\t.uint8('ExpansionOutputFet8') \t\t// boolean 0 = Off , 1 = On\n\t\t.uint8('ExpansionOutputRelay1') \t// boolean 0 = Off , 1 = On\n\t\t.uint8('ExpansionOutputRelay2') \t// boolean 0 = Off , 1 = On\n\t\t.uint8('ExpansionOutputRelay3') \t// boolean 0 = Off , 1 = On\n\t\t.uint8('ExpansionOutputRelay4') \t// boolean 0 = Off , 1 = On\n\t\t.int16le('ExpansionOutputPwm1') \n\t\t.int16le('ExpansionOutputPwm2') \n\t\t.uint8('ExpansionInput1') \t\t\t// boolean 0 = Off , 1 = On\n\t\t.uint8('ExpansionInput2') \t\t\t// boolean 0 = Off , 1 = On\n\t\t.uint8('ExpansionInput3') \t\t\t// boolean 0 = Off , 1 = On\n\t\t.uint8('ExpansionInput4') \t\t\t// boolean 0 = Off , 1 = On\n\t\t.uint8('ExpansionInput5') \n\t\t.int16le('ExpansionInputAIN1') \n\t\t.int16le('ExpansionInputAIN2') \n\t\t.floatle('MinBypassSession', \t\t{ formatter: (x) => {return x/1000;}}) // Ah\n\t\t.floatle('MaxBypassSession', \t\t{ formatter: (x) => {return x/1000;}}) // Ah\n\t\t.uint8('MinBypassSessionID')\n\t\t.uint8('MaxBypassSessionID')\n\t\t.uint8('RebalanceBypassExtra')  \t// boolean 0 = Off , 1 = On\n\t\t.int16le('RepeatCellVoltCounter') \n\n  \nmsg.payload = typea.parse(buf);\n\n// convert date(s)\nmsg.payload.SystemTime = new Date(msg.payload.SystemTime*1000);\n\n\nswitch(msg.payload.CmuPollerMode) {\n    case 0:\n        msg.payload.CmuPollerMode = \"Idle\";\n        break;\n    case 1:\n        msg.payload.CmuPollerMode = \"Normal\";\n        break;\n    case 2:\n        msg.payload.CmuPollerMode = \" Start collection\";\n        break;\n    case 3:\n        msg.payload.CmuPollerMode = \"Collection running\";\n        break;\n    case 4:\n        msg.payload.CmuPollerMode = \"Start synchronisation\";\n        break;\n    case 5:\n        msg.payload.CmuPollerMode = \"Sync Running\";\n        break;\n    case 6:\n        msg.payload.CmuPollerMode = \"Start NetworkTest\";\n        break;\n    case 7:\n        msg.payload.CmuPollerMode = \"NetworkTest running\";\n        break;\n    case 8:\n        msg.payload.CmuPollerMode = \"Start BypassTest\";\n        break;\n    case 9:\n        msg.payload.CmuPollerMode = \"BypassTest running\";\n        break;\n    case 10:\n        msg.payload.CmuPollerMode = \"Start Reboot All\";\n        break;\n    case 11:\n        msg.payload.CmuPollerMode = \" Reboot All devices\";\n        break;\n    case 12:\n        msg.payload.CmuPollerMode = \" Start Simulator\";\n        break;\n    case 13:\n        msg.payload.CmuPollerMode = \"Simulator running\";\n        break;\n    default:\n        msg.payload.CmuPollerMode = \"Buggered\";\n}\n\nswitch(msg.payload.SystemOpStatus) {\n    case 0:\n        msg.payload.SystemOpStatus = \"Timeout\";\n        break;\n    case 1:\n        msg.payload.SystemOpStatus = \"Idle\";\n        break;\n    case 2:\n        msg.payload.SystemOpStatus = \"Charging\";\n        break;\n    case 3:\n        msg.payload.SystemOpStatus = \"Discharging\";\n        break;\n    case 4:\n        msg.payload.SystemOpStatus = \"Full\";\n        break;\n    case 5:\n        msg.payload.SystemOpStatus = \"Empty\";\n        break;\n    case 6:\n        msg.payload.SystemOpStatus = \"Simulator\";\n        break;\n    case 7:\n        msg.payload.SystemOpStatus = \"CriticalPending\";\n        break;\n    case 8:\n        msg.payload.SystemOpStatus = \"CriticalOffline\";\n        break;\n    case 9:\n        msg.payload.SystemOpStatus = \"MqttOffline\";\n        break;\n    case 10:\n        msg.payload.SystemOpStatus = \"AuthSetup\";\n        break;\n    case 11:\n        msg.payload.SystemOpStatus = \"Shunt Timeout\";\n        break;\n    default:\n        msg.payload.SystemOpStatus = \"Buggered\";\n}\n\nswitch(msg.payload.SystemAuthMode) {\n    case 0:\n        msg.payload.SystemAuthMode = \"Default\";\n        break;\n    case 1:\n        msg.payload.SystemAuthMode = \"Technician\";\n        break;\n    case 2:\n        msg.payload.SystemAuthMode = \"Factory\";\n        break;\n    default:\n        msg.payload.SystemAuthMode = \"Buggered\";\n}\n\nswitch(msg.payload.ShuntPollerMode) {\n    case 0:\n        msg.payload.ShuntPollerMode = \"Idle Start\";\n        break;\n    case 1:\n        msg.payload.ShuntPollerMode = \"Idle\";\n        break;\n    case 2:\n        msg.payload.ShuntPollerMode = \"Sync Start\";\n        break;\n    case 3:\n        msg.payload.ShuntPollerMode = \"Sync Running\";\n        break;\n    case 4:\n        msg.payload.ShuntPollerMode = \"Normal\";\n        break;\n    case 5:\n        msg.payload.ShuntPollerMode = \"ShuntMon2 SetupStart\";\n        break;\n    case 6:\n        msg.payload.ShuntPollerMode = \"ShuntMon2 SetupRunning\";\n        break;\n    case 7:\n        msg.payload.ShuntPollerMode = \"ShuntMon2 Normal\";\n        break;\n    default:\n        msg.payload.ShuntPollerMode = \"Buggered\";\n}\n\nswitch(msg.payload.ShuntStatus) {\n    case 0:\n        msg.payload.ShuntStatus = \"Timeout\";\n        break;\n    case 1:\n        msg.payload.ShuntStatus = \"Discharging\";\n        break;\n    case 2:\n        msg.payload.ShuntStatus = \"Idle\";\n        break;\n    case 4:\n        msg.payload.ShuntStatus = \"Charging\";\n        break;\n    default:\n        msg.payload.ShuntStatus = \"Buggered\";\n}\nreturn msg;","outputs":1,"noerr":0,"x":940,"y":520,"wires":[["9cec54bc.9576c8","6737b8da.fa5b58","7f0b8d22.9e4c94","de8d1891.dc7848"]]},{"id":"f28d7b2.19b3588","type":"function","z":"703f4458.ff2d1c","name":"Msg_415a_CellNodeStatus","func":"var Packet = global.get('binary_parser');\nvar buf = msg.payload;\n\nvar typea = new Packet()\n\t\t.uint8('ID')\n                .uint8('USN')\n                .int16le('MinCellVolt',                 { formatter: (x) => {return x/1000;}})\n                .int16le('MaxCellVolt',                 { formatter: (x) => {return x/1000;}})\n                .uint8('MinCellTemp',                   { formatter: (x) => {return x-40;}}) // temperature ºC\n                .uint8('BypassTemp',                    { formatter: (x) => {return x-40;}}) // temperature ºC\n                .int16le('BypassAmp',                   { formatter: (x) => {return x/1000;}})\n                .uint8('Status'); /* Choices NodeStatuses\n\t\t\t\t\t\tNone = 0,\n\t\t\t\t\t\tHighVolt = 1,\n\t\t\t\t\t\tHighTemp = 2,\n\t\t\t\t\t\tOk = 3,\n\t\t\t\t\t\tTimeout = 4,\n\t\t\t\t\t\tLowVolt = 5,\n\t\t\t\t\t\tDisabled = 6,\n\t\t\t\t\t\tInBypass = 7,\n\t\t\t\t\t\tInitialBypass = 8,\n\t\t\t\t\t\tFinalBypass = 9,\n\t\t\t\t\t\tMissingSetup = 10,\n\t\t\t\t\t\tNoConfig = 11,\n\t\t\t\t\t\tCellOutLimits = 12, */\n/*\n\t\tvar status = new Packet()\n\t\t.skip(8)\n\t\t.uint8('CmuRxOpStatusNodeID')\n\t\t.uint8('Records')\n\t\t.uint8('FirstNodeID')\n\t\t.uint8('LastNodeID')\n\t\t.array('nodes', {\n\t\t\ttype : Packet(),\n\t\t\tlength : 'Records'\n\t\t})\n*/\n  \nmsg.payload = typea.parse(buf);\n\nswitch(msg.payload.Status) {\n    case 0:\n        msg.payload.Status = \"None\";\n        break;\n    case 1:\n        msg.payload.Status = \"HighVolt\";\n        break;\n    case 2:\n        msg.payload.Status = \"HighTemp\";\n        break;\n    case 3:\n        msg.payload.Status = \"Ok\";\n        break;\n    case 4:\n        msg.payload.Status = \"Timeout\";\n        break;\n    case 5:\n        msg.payload.Status = \"LowVolt\";\n        break;\n    case 6:\n        msg.payload.Status = \"Disabled\";\n        break;\n    case 7:\n        msg.payload.Status = \"InBypass\";\n        break;\n    case 8:\n        msg.payload.Status = \"InitialBypass\";\n        break;\n    case 9:\n        msg.payload.Status = \"FinalBypass\";\n        break;\n    case 10:\n        msg.payload.Status = \"MissingSetup\";\n        break;\n    case 11:\n        msg.payload.Status = \"NoConfig\";\n        break;\n    case 12:\n        msg.payload.Status = \"CellOutLimits\";\n        break;\n    default:\n        msg.payload.Status = \"Buggered\";\n}\n\nreturn msg;","outputs":1,"noerr":0,"x":960,"y":220,"wires":[["27cd995a.5a7766"]]},{"id":"cd4d9b35.b7c628","type":"debug","z":"703f4458.ff2d1c","name":"","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","x":1330,"y":320,"wires":[]},{"id":"e12500e9.20d82","type":"function","z":"703f4458.ff2d1c","name":"Msg_3e32_StatusRapid","func":"var Packet = global.get('binary_parser');\nvar buf = msg.payload;\n\nvar typea = new Packet()\n\t\t.skip(8)\n\t\t.int16le('MinCellVolt',\t\t{ formatter: (x) => {return x/1000;}})\n\t\t.int16le('MaxCellVolt',\t\t{ formatter: (x) => {return x/1000;}})\n\t\t.uint8('MinCellVoltId')\n\t\t.uint8('MaxCellVoltId')\n\t\t.uint8('MinCellTemp',\t\t{ formatter: (x) => {return x-40;}}) // temperature ºC\n\t\t.uint8('MaxCellTemp',\t\t{ formatter: (x) => {return x-40;}}) // temperature ºC\n\t\t.uint8('MinCellTempId')\n\t\t.uint8('MaxCellTempId')\n\t\t.int16le('MinBypassAmp', \t{ formatter: (x) => {return x/1000;}})\n\t\t.int16le('MaxBypassAmp', \t{ formatter: (x) => {return x/1000;}})\n\t\t.uint8('MinBypassAmpId')\n\t\t.uint8('MaxBypassAmpId')\n\t\t.uint8('MinBypassTemp',\t\t{ formatter: (x) => {return x-40;}}) // temperature ºC\n\t\t.uint8('MaxBypassTemp',\t\t{ formatter: (x) => {return x-40;}}) // temperature ºC\n\t\t.uint8('MinBypassTempId',\t{ formatter: (x) => {return x-40;}})\n\t\t.uint8('MaxBypassTempId',\t{ formatter: (x) => {return x-40;}})\n\t\t.int16le('AvgCellVolt',   \t{ formatter: (x) => {return x/1000;}})\n\t\t.uint8('AvgCellTemp',    \t{ formatter: (x) => {return x-40;}}) // temperature ºC\n\t\t.uint8('NumOfCellsAboveInitialBypass')\n\t\t.uint8('NumOfCellsAboveFinalBypass')\n\t\t.uint8('NumOfCellsInBypass')\n\t\t.uint8('NumOfCellsOverdue')\n\t\t.uint8('NumOfCellsActive')\n\t\t.uint8('NumOfCellsInSystem')\n\t\t.uint8('CmuTxOpStatusId')\n\t\t.uint8('CmuRxOpStatusId')\n\t\t.uint8('CmuRxOpStatusUSN')\n\t\t.int16le('ShuntVoltage',\t{ formatter: (x) => {return x/100;}})  // voltage\n\t\t.floatle('ShuntCurrent',\t{ formatter: (x) => {return x/1000;}}) // amp\n\t\t.floatle('ShuntPowerVA',\t{ formatter: (x) => {return x/1000;}}) // kW \n\n  \nmsg.payload = typea.parse(buf);\nreturn msg;","outputs":1,"noerr":0,"x":950,"y":420,"wires":[["ca067764.010408","fb47ae92.67c41","b6a22f86.df8a3","6bf9066b.2d44b8"]]},{"id":"4988e8bd.552b28","type":"function","z":"703f4458.ff2d1c","name":"Msg_4232_CellNodeFull","func":"var Packet = global.get('binary_parser');\nvar buf = msg.payload;\n\nvar typea = new Packet()\n\t\t.skip(8)\n\t\t.uint8('ID')\n\t\t.uint8('USN')\n\t\t.int16le('MinCellVolt',\t\t\t{ formatter: (x) => {return x/1000;}})\n\t\t.int16le('MaxCellVolt',\t\t\t{ formatter: (x) => {return x/1000;}})\n\t\t.uint8('MinCellTemp',\t\t\t{ formatter: (x) => {return x-40;}}) // temperature ºC\n\t\t.uint8('BypassTemp',\t\t\t{ formatter: (x) => {return x-40;}}) // temperature ºC\n\t\t.int16le('BypassAmp', \t\t\t{ formatter: (x) => {return x/1000;}})\n\t\t.uint8('DataErrorCounter')\n\t\t.uint8('ResetCounter')\n\t\t.uint8('Status') /* Choices NodeStatuses\n\t\t\t\tNone = 0,\n\t\t\t\tHighVolt = 1,\n\t\t\t\tHighTemp = 2,\n\t\t\t\tOk = 3,\n\t\t\t\tTimeout = 4,\n\t\t\t\tLowVolt = 5,\n\t\t\t\tDisabled = 6,\n\t\t\t\tInBypass = 7,\n\t\t\t\tInitialBypass = 8,\n\t\t\t\tFinalBypass = 9,\n\t\t\t\tMissingSetup = 10,\n\t\t\t\tNoConfig = 11,\n\t\t\t\tCellOutLimits = 12, */\t\n\t\t.uint8('IsOverdue')\t\t\t\t// boolean 0 = Off , 1 = On\n\n\t\t.int16le('LoCellVoltAlert',\t\t{ formatter: (x) => {return x/1000;}})\n\t\t.int16le('HiCellVoltAlert',\t\t{ formatter: (x) => {return x/1000;}})\n\t\t.int16le('BypassVoltLevel',\t\t{ formatter: (x) => {return x/1000;}})\n\t\t.int16le('BypassAmpLimit',\t\t{ formatter: (x) => {return x/1000;}})\n\t\t.uint8('BypassTempLimit',\t\t{ formatter: (x) => {return x-40;}}) // temperature ºC\n\t\t.uint8('HiCellTempAlert',\t\t{ formatter: (x) => {return x-40;}}) // temperature ºC\n\t\t.uint8('RawVoltCalOffset')\n\t\t.int16le('FwVers')\n\t\t.int16le('HwVers')\n\t\t.int16le('BootVers')\n\t\t.uint32le('SerialNo')\t\n\t\t.uint32le('BypassInitialDate') \t// Epoch\n\t\t.floatle('BypassSessionAh',\t\t{ formatter: (x) => {return x/1000;}}) // Ah\n\t\t.uint8('RepeatCellV')\n\n  \nmsg.payload = typea.parse(buf);\n\n// convert date(s)\nmsg.payload.BypassInitialDate = new Date(msg.payload.BypassInitialDate*1000);\n\n\nswitch(msg.payload.Status) {\n    case 0:\n        msg.payload.Status = \"None\";\n        break;\n    case 1:\n        msg.payload.Status = \"HighVolt\";\n        break;\n    case 2:\n        msg.payload.Status = \"HighTemp\";\n        break;\n    case 3:\n        msg.payload.Status = \"Ok\";\n        break;\n    case 4:\n        msg.payload.Status = \"Timeout\";\n        break;\n    case 5:\n        msg.payload.Status = \"LowVolt\";\n        break;\n    case 6:\n        msg.payload.Status = \"Disabled\";\n        break;\n    case 7:\n        msg.payload.Status = \"InBypass\";\n        break;\n    case 8:\n        msg.payload.Status = \"InitialBypass\";\n        break;\n    case 9:\n        msg.payload.Status = \"FinalBypass\";\n        break;\n    case 10:\n        msg.payload.Status = \"MissingSetup\";\n        break;\n    case 11:\n        msg.payload.Status = \"NoConfig\";\n        break;\n    case 12:\n        msg.payload.Status = \"CellOutLimits\";\n        break;\n    default:\n        msg.payload.Status = \"Buggered\";\n}\n\nreturn msg;","outputs":1,"noerr":0,"x":950,"y":320,"wires":[["cd4d9b35.b7c628","cd7689e1.49ef98"]]},{"id":"d0b35d3f.bd107","type":"debug","z":"703f4458.ff2d1c","name":"","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","x":1330,"y":620,"wires":[]},{"id":"d51287cf.c303d8","type":"function","z":"703f4458.ff2d1c","name":"Msg_4932_ControlRemoteStatus","func":"var Packet = global.get('binary_parser');\nvar buf = msg.payload;\n\nvar typea = new Packet()\n\t\t.skip(8)\n\t\t.uint8('CanbusRxStatusTicks')  \n\t\t.uint8('CanbusRxUnknownTicks')  \n\t\t.uint8('CanbusTxCmdTicks')  \n\t\t.uint8(  'RemoteChargeActualCelcius', \t\t{ formatter: (x) => {return x-40;}}) // temperature ºC\n\t\t.int16le('RemoteChargeTargetVolt')\n\t\t.int16le('RemoteChargeTargetAmp')\n\t\t.int16le('RemoteChargeTargetVA')\n\t\t.int16le('RemoteChargeActualVolt')\n\t\t.int16le('RemoteChargeActualAmp')\n\t\t.int16le('RemoteChargeActualVA')\n\t\t.uint32le('RemoteChargeActualFlag1')\n\t\t.uint32le('RemoteChargeActualFlag2')\n\t\t.uint32le('RemoteChargeActualRxTime') // Epoch\n\t\t.skip(1)\n\t\t.uint8(  'RemoteDishargeActualCelcius', \t{ formatter: (x) => {return x-40;}}) // temperature ºC\n\t\t.int16le('RemoteDischargeTargetVolt')\n\t\t.int16le('RemoteDischargeTargetAmp')\n\t\t.int16le('RemoteDischargeTargetVA')\n\t\t.int16le('RemoteDischargeActualVolt')\n\t\t.int16le('RemoteDischargeActualAmp')\n\t\t.int16le('RemoteDischargeActualVA')\n\t\t.uint32le('RemoteDischargeActualFlag1')\n\t\t.uint32le('RemoteDischargeActualFlag2')\n\t\t.uint32le('RemoteDischargeActualRxTime') // Epoch\n  \nmsg.payload = typea.parse(buf);\n\n// convert date(s)\nmsg.payload.RemoteChargeActualRxTime = new Date(msg.payload.RemoteChargeActualRxTime*1000);\nmsg.payload.RemoteDischargeActualRxTime = new Date(msg.payload.RemoteDischargeActualRxTime*1000);\n\nreturn msg;","outputs":1,"noerr":0,"x":980,"y":620,"wires":[["d0b35d3f.bd107"]]},{"id":"f9305cd2.54f51","type":"debug","z":"703f4458.ff2d1c","name":"","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","x":1330,"y":720,"wires":[]},{"id":"6f7a507b.11767","type":"function","z":"703f4458.ff2d1c","name":"Msg_6131_StatusComms","func":"var Packet = global.get('binary_parser');\nvar buf = msg.payload;\n\nvar typea = new Packet()\n\t\t.skip(8)\n\t\t.uint32le('SystemTime') // Epoch\n\t\t.uint8('SystemOpStatus') /* Choices\n\t\t\t\tSimulator = 0,   \t  // LED = rainbow pulse\n\t\t\t\tIdle = 1,        \t  // LED = green slow pulse\n\t\t\t\tDischarging = 2, \t  // LED = green solid \n\t\t\t\tSoC Empty = 3,   \t  // LED = green double blink\n\t\t\t\tCharging = 4,    \t  // LED = blue slow pulse\n\t\t\t\tFull = 5,        \t  // LED = blue double blink\n\t\t\t\tTimeout = 6,     \t  // LED = red solid\n\t\t\t\tCritical Pending = 7, // LED = red fast pulse\n\t\t\t\tCritical Offline = 8, // LED = red slow pulse\n\t\t\t\tMqtt Offline = 9,     // LED = white blink\n\t\t\t\tAuth Setup = 10,      // LED = white solid\n\t\t\t\tShunt Timeout = 11,   // LED = red solid  \t*/\n\t\t.uint8('SystemAuthMode') /* Choices\n\t\t\t\tDefault = 0,\n\t\t\t\tTechnician = 1,\n\t\t\t\tFactory = 2, */\n\t\t.int16le('SystemAuthToken')\n\t\t.int16le('SystemAuthRejectTicks')\n\t\t.uint8('WifiState') /* Choices WifiOpStates\n\t\t\t\tBroadcast Start = 0,\n\t\t\t\tBroadcast Prep = 1,\n\t\t\t\tBroadcast TxSetup = 2,\n\t\t\t\tBroadcast Running = 3,\n\t\t\t\tUsbCmd Start = 4,\n\t\t\t\tUsbCmd Running = 5,\n\t\t\t\tUsbCmd PassThru = 6,\n\t\t\t\tUsbProg Start = 7,\n\t\t\t\tUsbProg Running = 8,\n\t\t\t\tUsbProg PassThru = 9,\n\t\t\t\tOffline Start = 10,\n\t\t\t\tOffline Running = 11,\n\t\t\t\tOffline Stop = 12,\n\t\t\t\tLimited Start = 13,\n\t\t\t\tLimited Prep = 14,\n\t\t\t\tLimited Running = 15,\n\t\t\t\tJoinAp Start = 16,\n\t\t\t\tJoinAp Running = 17,\t*/\t\t\n\t\t.uint8('WifiTxCmdTicks') \n\t\t.uint8('WifiRxCmdTicks') \n\t\t.uint8('WifiRxUnknownTicks') \n\t\t.uint8('CanbusOpStatus') /* Choices \n\t\t\t\t\n\t\t\t\t \t*/\t\t\n\t\t.uint8('CanbusRxStatusTicks')\n\t\t.uint8('CanbusRxUnknownTicks')\n\t\t.uint8('CanbusRxStatusTicks')\n\t\t.uint8('ShuntPollerMode') /* Choices ShuntPollerModes\n\t\t\t\tIdle Start = 0,\n\t\t\t\tIdle = 1,\n\t\t\t\tSync Start = 2,\n\t\t\t\tSync Running = 3,\n\t\t\t\tNormal = 4,\n\t\t\t\tShuntMon2 SetupStart = 5,\n\t\t\t\tShuntMon2 SetupRunning = 6,\n\t\t\t\tShuntMon2 Normal = 7, */\n\t\t.uint8('ShuntStatus') /* Choices  ShuntStatuses\n\t\t\t\tTimeout = 0,\n\t\t\t\tDischarging = 1,\n\t\t\t\tIdle = 2,\n\t\t\t\tCharging = 4 */\n\t\t.uint8('ShuntRxAmpTicks')\n\t\t.uint8('ShuntTxAmpTicks')\n\t\t.uint8('CmuPollerMode') \t    /* Choices\n\t\t\t\tIdle = 0,\n\t\t\t\tNormal = 1,\n\t\t\t\tCollection Start = 2,\n\t\t\t\tCollection Running = 3,\n\t\t\t\tSync Start = 4,\n\t\t\t\tSync Running = 5,\n\t\t\t\tNetworkTest Start = 6,\n\t\t\t\tNetworkTest Running = 9,\n\t\t\t\tBypassTest Start = 7,\n\t\t\t\tBypassTest Running = 8,\n\t\t\t\tRebootAll Start = 10,\n\t\t\t\tRebooting AllDevices = 11,\n\t\t\t\tSimulator Start = 12,\n\t\t\t\tSimulator Running = 13, */\n\t\t.uint8('CmuOpStatus') /* Choices */\n\t\t.uint8('CmuTxCmdTicks')\n\t\t\nmsg.payload = typea.parse(buf);\n\n\n// convert date(s)\nmsg.payload.SystemTime = new Date(msg.payload.SystemTime*1000);\n\nswitch(msg.payload.SystemOpStatus) {\n    case 0:\n        msg.payload.SystemOpStatus = \"Simulator\";\n        break;\n    case 1:\n        msg.payload.SystemOpStatus = \"Idle\";\n        break;\n    case 2:\n        msg.payload.SystemOpStatus = \"Discharging\";\n        break;\n    case 3:\n        msg.payload.SystemOpStatus = \"SoC Empty\";\n        break;\n    case 4:\n        msg.payload.SystemOpStatus = \"Charging\";\n        break;\n    case 5:\n        msg.payload.SystemOpStatus = \"Full\";\n        break;\n    case 6:\n        msg.payload.SystemOpStatus = \"Timeout\";\n        break;\n    case 7:\n        msg.payload.SystemOpStatus = \"Critical Pending\";\n        break;\n    case 8:\n        msg.payload.SystemOpStatus = \"Critical Offline\";\n        break;\n    case 9:\n        msg.payload.SystemOpStatus = \"Mqtt Offline\";\n        break;\n    case 10:\n        msg.payload.SystemOpStatus = \"Auth Setup\";\n        break;\n    case 11:\n        msg.payload.SystemOpStatus = \"Shunt Timeout\";\n        break;\n    default:\n        msg.payload.SystemOpStatus = \"Buggered\";\n}\n\nswitch(msg.payload.SystemAuthMode) {\n    case 0:\n        msg.payload.SystemAuthMode = \"Default\";\n        break;\n    case 1:\n        msg.payload.SystemAuthMode = \"Technician\";\n        break;\n    case 2:\n        msg.payload.SystemAuthMode = \"Factory\";\n        break;\n    default:\n        msg.payload.SystemAuthMode = \"Buggered\";\n}\n\nswitch(msg.payload.WifiState) {\n    case 0:\n        msg.payload.WifiState = \"Broadcast Start\";\n        break;\n    case 1:\n        msg.payload.WifiState = \"Broadcast Prep\";\n        break;\n    case 2:\n        msg.payload.WifiState = \"Broadcast TxSetup\";\n        break;\n    case 3:\n        msg.payload.WifiState = \"Broadcast Running\";\n        break;\n    case 4:\n        msg.payload.WifiState = \"UsbCmd Start\";\n        break;\n    case 5:\n        msg.payload.WifiState = \"UsbCmd Running\";\n        break;\n    case 6:\n        msg.payload.WifiState = \"UsbCmd PassThru\";\n        break;\n    case 7:\n        msg.payload.WifiState = \"UsbProg Start\";\n        break;\n    case 8:\n        msg.payload.WifiState = \"UsbProg Running\";\n        break;\n    case 9:\n        msg.payload.WifiState = \"UsbProg PassThru\";\n        break;\n    case 10:\n        msg.payload.WifiState = \"Offline Start\";\n        break;\n    case 11:\n        msg.payload.WifiState = \"Offline Running\";\n        break;\n    case 12:\n        msg.payload.WifiState = \"Offline Stop\";\n        break;\n    case 13:\n        msg.payload.WifiState = \"Limited Start\";\n        break;\n    case 14:\n        msg.payload.WifiState = \"Limited Prep\";\n        break;\n    case 15:\n        msg.payload.WifiState = \"Limited Running\";\n        break;\n    case 16:\n        msg.payload.WifiState = \"JoinAp Start\";\n        break;\n    case 17:\n        msg.payload.WifiState = \"JoinAp Running\";\n        break;\n    default:\n        msg.payload.WifiState = \"Buggered\";\n}\n\nswitch(msg.payload.ShuntPollerMode) {\n    case 0:\n        msg.payload.ShuntPollerMode = \"Idle Start\";\n        break;\n    case 1:\n        msg.payload.ShuntPollerMode = \"Idle\";\n        break;\n    case 2:\n        msg.payload.ShuntPollerMode = \"Sync Start\";\n        break;\n    case 3:\n        msg.payload.ShuntPollerMode = \"Sync Running\";\n        break;\n    case 4:\n        msg.payload.ShuntPollerMode = \"Normal\";\n        break;\n    case 5:\n        msg.payload.ShuntPollerMode = \"ShuntMon2 SetupStart\";\n        break;\n    case 6:\n        msg.payload.ShuntPollerMode = \"ShuntMon2 SetupRunning\";\n        break;\n    case 7:\n        msg.payload.ShuntPollerMode = \"ShuntMon2 Normal\";\n        break;\n    default:\n        msg.payload.ShuntPollerMode = \"Buggered\";\n}\n\nswitch(msg.payload.ShuntStatus) {\n    case 0:\n        msg.payload.ShuntStatus = \"Timeout\";\n        break;\n    case 1:\n        msg.payload.ShuntStatus = \"Discharging\";\n        break;\n    case 2:\n        msg.payload.ShuntStatus = \"Idle\";\n        break;\n    case 4:\n        msg.payload.ShuntStatus = \"Charging\";\n        break;\n    default:\n        msg.payload.ShuntStatus = \"Buggered\";\n}\n\nswitch(msg.payload.CmuPollerMode) {\n    case 0:\n        msg.payload.CmuPollerMode = \"Idle\";\n        break;\n    case 1:\n        msg.payload.CmuPollerMode = \"Normal\";\n        break;\n    case 2:\n        msg.payload.CmuPollerMode = \"Collection Start\";\n        break;\n    case 3:\n        msg.payload.CmuPollerMode = \"Collection Running\";\n        break;\n    case 4:\n        msg.payload.CmuPollerMode = \"Sync Start\";\n        break;\n    case 5:\n        msg.payload.CmuPollerMode = \"Sync Running\";\n        break;\n    case 6:\n        msg.payload.CmuPollerMode = \"NetworkTest Start\";\n        break;\n    case 7:\n        msg.payload.CmuPollerMode = \"NetworkTest Running\";\n        break;\n    case 8:\n        msg.payload.CmuPollerMode = \"BypassTest Start\";\n        break;\n    case 9:\n        msg.payload.CmuPollerMode = \"BypassTest Running\";\n        break;\n    case 10:\n        msg.payload.CmuPollerMode = \"RebootAll Start\";\n        break;\n    case 11:\n        msg.payload.CmuPollerMode = \"Rebooting AllDevices\";\n        break;\n    case 12:\n        msg.payload.CmuPollerMode = \"Simulator Start\";\n        break;\n    case 13:\n        msg.payload.CmuPollerMode = \"Simulator Running\";\n        break;\n    default:\n        msg.payload.CmuPollerMode = \"Buggered\";\n}\n\nreturn msg;","outputs":1,"noerr":0,"x":950,"y":720,"wires":[["f9305cd2.54f51"]]},{"id":"9de67f39.ab826","type":"debug","z":"703f4458.ff2d1c","name":"","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","x":1330,"y":820,"wires":[]},{"id":"21bbdc44.361ab4","type":"function","z":"703f4458.ff2d1c","name":"Msg_5732_SystemDiscovery","func":"var Packet = global.get('binary_parser');\nvar buf = msg.payload;\n\nvar typea = new Packet()\n\t\t.skip(8)\n\t\t.string('SystemCode', \t{ encoding: 'ascii', length: 8 })\n\t\t.int16le('SystemFirmwareVersion')\n\t\t.int16le('SystemHardwareVersion')\n\t\t.int32le('SystemTime') // Epoch\n\t\t.uint8('SystemOpStatus') /* Choices\n\t\t\t\tSimulator = 0,   \t  // LED = rainbow pulse\n\t\t\t\tIdle = 1,        \t  // LED = green slow pulse\n\t\t\t\tDischarging = 2, \t  // LED = green solid \n\t\t\t\tSoC Empty = 3,   \t  // LED = green double blink\n\t\t\t\tCharging = 4,    \t  // LED = blue slow pulse\n\t\t\t\tFull = 5,        \t  // LED = blue double blink\n\t\t\t\tTimeout = 6,     \t  // LED = red solid\n\t\t\t\tCritical Pending = 7, // LED = red fast pulse\n\t\t\t\tCritical Offline = 8, // LED = red slow pulse\n\t\t\t\tMqtt Offline = 9,     // LED = white blink\n\t\t\t\tAuth Setup = 10,      // LED = white solid\n\t\t\t\tShunt Timeout = 11,   // LED = red solid  \t*/\n\t\t.uint8('SystemAuthMode') /* Choices\n\t\t\t\tDefault \t= 0,\n\t\t\t\tTechnician \t= 1,\n\t\t\t\tFactory \t= 2, */\n\t\t.uint8('CriticalBatOkState')    // 0 = Off , 1 = On\n\t\t.uint8('ChargePowerRateState')  /* Choices\n\t\t\t\tOff \t\t\t= 0,\n\t\t\t\tLimited Power \t= 2,\n\t\t\t\tNormal Power  \t= 4, */\n\t\t.uint8('DischargePowerRateState') /* Choices\n\t\t\t\tOff \t\t\t= 0,\n\t\t\t\tLimited Power \t= 2,\n\t\t\t\tNormal Power  \t= 4, */\n\t\t.uint8('HeatOnState') \t\t\t// 0 = Off , 1 = On\n\t\t.uint8('CoolOnState') \t\t\t// 0 = Off , 1 = On\n\t\t.int16le('MinCellVolt', \t{ formatter: (x) => {return x/1000;}})\n\t\t.int16le('MaxCellVolt', \t{ formatter: (x) => {return x/1000;}})\n\t\t.int16le('AvgCellVolt', \t{ formatter: (x) => {return x/1000;}})\n\t\t.uint8('MinCellTemp', \t\t{ formatter: (x) => {return x-40;}})     // temperature ºC\n\t\t.uint8('NumOfCellsActive')\n\t\t.uint8('CmuRxOpStatusUSN')\n\t\t.uint8('CmuPollerMode')  /* Choices\n\t\t\t\tIdle = 0,\n\t\t\t\tNormal = 1,\n\t\t\t\tCollection Start = 2,\n\t\t\t\tCollection Running = 3,\n\t\t\t\tSync Start = 4,\n\t\t\t\tSync Running = 5,\n\t\t\t\tNetworkTest Start = 6,\n\t\t\t\tNetworkTest Running = 9,\n\t\t\t\tBypassTest Start = 7,\n\t\t\t\tBypassTest Running = 8,\n\t\t\t\tRebootAll Start = 10,\n\t\t\t\tRebooting AllDevices = 11,\n\t\t\t\tSimulator Start = 12,\n\t\t\t\tSimulator Running = 13, */\n\t\t.uint8('ShuntSOC',\t\t\t{ formatter: (x) => {return x/2-5;}})    // percent\n\t\t.int16le('ShuntVoltage',\t{ formatter: (x) => {return x/100;}})\n\t\t.floatle('ShuntCurrent',\t{ formatter: (x) => {return x/1000;}})\n\t\t.uint8('ShuntStatus') /* Choices\n\t\t\t\tTimeout = 0,\n\t\t\t\tDischarging = 1,\n\t\t\t\tIdle = 2,\n\t\t\t\tCharging = 4 */\n\t\t.uint8('ShuntRxAmpTicks')\n  \nmsg.payload = typea.parse(buf);\n\n// convert date(s)\nmsg.payload.SystemTime = new Date(msg.payload.SystemTime*1000);\n\nswitch(msg.payload.SystemOpStatus) {\n    case 0:\n        msg.payload.SystemOpStatus = \"Timeout\";\n        break;\n    case 1:\n        msg.payload.SystemOpStatus = \"Idle\";\n        break;\n    case 2:\n        msg.payload.SystemOpStatus = \"Charging\";\n        break;\n    case 3:\n        msg.payload.SystemOpStatus = \"Discharging\";\n        break;\n    case 4:\n        msg.payload.SystemOpStatus = \"Full\";\n        break;\n    case 5:\n        msg.payload.SystemOpStatus = \"Empty\";\n        break;\n    case 6:\n        msg.payload.SystemOpStatus = \"Simulator\";\n        break;\n    case 7:\n        msg.payload.SystemOpStatus = \"CriticalPending\";\n        break;\n    case 8:\n        msg.payload.SystemOpStatus = \"CriticalOffline\";\n        break;\n    case 9:\n        msg.payload.SystemOpStatus = \"MqttOffline\";\n        break;\n    case 10:\n        msg.payload.SystemOpStatus = \"AuthSetup\";\n        break;\n    case 11:\n        msg.payload.SystemOpStatus = \"Shunt Timeout\";\n        break;\n    default:\n        msg.payload.SystemOpStatus = \"Buggered\";\n}\n\nswitch(msg.payload.SystemAuthMode) {\n    case 0:\n        msg.payload.SystemAuthMode = \"Default\";\n        break;\n    case 1:\n        msg.payload.SystemAuthMode = \"Technician\";\n        break;\n    case 2:\n        msg.payload.SystemAuthMode = \"Factory\";\n        break;\n    default:\n        msg.payload.SystemAuthMode = \"Buggered\";\n}\n\nswitch(msg.payload.ChargePowerRateState) {\n    case 0:\n        msg.payload.ChargePowerRateState = \"Off\";\n        break;\n    case 2:\n        msg.payload.ChargePowerRateState = \"Limited Power\";\n        break;\n    case 4:\n        msg.payload.ChargePowerRateState = \"Normal Power\";\n        break;\n    default:\n        msg.payload.ChargePowerRateState = \"Buggered\";\n}\n\nswitch(msg.payload.DischargePowerRateState) {\n    case 0:\n        msg.payload.DischargePowerRateState = \"Off\";\n        break;\n    case 2:\n        msg.payload.DischargePowerRateState = \"Limited Power\";\n        break;\n    case 4:\n        msg.payload.DischargePowerRateState = \"Normal Power\";\n        break;\n    default:\n        msg.payload.DischargePowerRateState = \"Buggered\";\n}\n\nswitch(msg.payload.CmuPollerMode) {\n    case 0:\n        msg.payload.CmuPollerMode = \"Idle\";\n        break;\n    case 1:\n        msg.payload.CmuPollerMode = \"Normal\";\n        break;\n    case 2:\n        msg.payload.CmuPollerMode = \" Start collection\";\n        break;\n    case 3:\n        msg.payload.CmuPollerMode = \"Collection running\";\n        break;\n    case 4:\n        msg.payload.CmuPollerMode = \"Start synchronisation\";\n        break;\n    case 5:\n        msg.payload.CmuPollerMode = \"Sync Running\";\n        break;\n    case 6:\n        msg.payload.CmuPollerMode = \"Start NetworkTest\";\n        break;\n    case 7:\n        msg.payload.CmuPollerMode = \"NetworkTest running\";\n        break;\n    case 8:\n        msg.payload.CmuPollerMode = \"Start BypassTest\";\n        break;\n    case 9:\n        msg.payload.CmuPollerMode = \"BypassTest running\";\n        break;\n    case 10:\n        msg.payload.CmuPollerMode = \"Start Reboot All\";\n        break;\n    case 11:\n        msg.payload.CmuPollerMode = \" Reboot All devices\";\n        break;\n    case 12:\n        msg.payload.CmuPollerMode = \" Start Simulator\";\n        break;\n    case 13:\n        msg.payload.CmuPollerMode = \"Simulator running\";\n        break;\n    default:\n        msg.payload.CmuPollerMode = \"Buggered\";\n}\n\nswitch(msg.payload.ShuntStatus) {\n    case 0:\n        msg.payload.ShuntStatus = \"Timeout\";\n        break;\n    case 1:\n        msg.payload.ShuntStatus = \"Discharging\";\n        break;\n    case 2:\n        msg.payload.ShuntStatus = \"Idle\";\n        break;\n    case 4:\n        msg.payload.ShuntStatus = \"Charging\";\n        break;\n    default:\n        msg.payload.ShuntStatus = \"Buggered\";\n}\n\nreturn msg;","outputs":1,"noerr":0,"x":960,"y":820,"wires":[["9de67f39.ab826"]]},{"id":"15b06891.46e917","type":"debug","z":"703f4458.ff2d1c","name":"","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","x":1330,"y":920,"wires":[]},{"id":"78113a63.308b74","type":"function","z":"703f4458.ff2d1c","name":"Msg_4032_StatusSlow","func":"var Packet = global.get('binary_parser');\nvar buf = msg.payload;\n\nvar typea = new Packet()\n \t\t.skip(8)\n\t\t.uint32le('SystemTime') \t\t\t// Epoch\n\t\t.uint8('IsProcessControl') \t\t\t// boolean 0 = Off , 1 = On\n\t\t.uint8('IsInitialStartup') \t\t\t// boolean 0 = Off , 1 = On\n\t\t.uint8('IgnoreWhenCellsOverdue') \t// boolean 0 = Off , 1 = On\n\t\t.uint8('IgnoreWhenShuntsOverdue') \t// boolean 0 = Off , 1 = On\n\t\t.uint8('MonitorDailySessionStats') \t// boolean 0 = Off , 1 = On\t\t\n\t\t.uint8('HwSystemSetupVers') \n\t\t.uint8('HwCellmonSetupVers') \n\t\t.uint8('HwShuntSetupVers') \n\t\t.uint8('HwExpansionSetupVers') \n\t\t.uint8('HwIntegrationSetupVers') \n\t\t.uint8('ControlCriticalSetupVers') \n\t\t.uint8('ControlChargeSetupVers')  \n\t\t.uint8('ControlDischargeSetupVers')  \t\t\n\t\t.uint8('ControlThermalSetupVers')  \n\t\t.uint8('ControlRemoteSetupVers')  \n\t\t.uint8('ControlSchedulerSetupVers') \t\t\t\n\t\t.int16le('EstDurationToFullmins') \n\t\t.int16le('EstDurationToEmptymins') \n\t\t.floatle('ShuntAcculmAvgCharge',\t{ formatter: (x) => {return x/1000;}}) // Ah\n\t\t.floatle('ShuntAcculmAvgDischg',\t{ formatter: (x) => {return x/1000;}}) // Ah\n\t\t.floatle('ShuntAcculmAvgNett',\t\t{ formatter: (x) => {return x/1000;}}) // Ah\n\t\t.uint8(  'hasShuntSocCountLo') \t\t// boolean 0 = Off , 1 = On\n\t\t.uint8(  'hasShuntSocCountHi') \t\t// boolean 0 = Off , 1 = On\t\t\n\t\t.uint32le('QuickSessRecentTime') \t// EPOCH\n\t\t.int16le('QuickSessNumOfRecords')\n\t\t.int16le('QuickSessMaxNumOfRecords')\n\t\t.skip(8) // acculmNett ADC counter \n\t\t.floatle('NomCapacityToEmpty',\t\t{ formatter: (x) => {return x/1000;}}) // Ah\n\t\t\nmsg.payload = typea.parse(buf);\n// convert date(s)\nmsg.payload.SystemTime = new Date(msg.payload.SystemTime*1000);\nmsg.payload.QuickSessRecentTime = new Date(msg.payload.QuickSessRecentTime*1000);\n\n\n\nreturn msg;","outputs":1,"noerr":0,"x":940,"y":920,"wires":[["15b06891.46e917"]]},{"id":"c2073a30.cdca48","type":"debug","z":"703f4458.ff2d1c","name":"","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","x":1330,"y":1020,"wires":[]},{"id":"39e3bf5e.8e903","type":"function","z":"703f4458.ff2d1c","name":"Msg_5432_DailySession","func":"var Packet = global.get('binary_parser');\nvar buf = msg.payload;\n\nvar typea = new Packet()\n\t\t.skip(8)\n\t\t.int16le('DailySessionMinCellVolt',\t\t{ formatter: (x) => {return x/1000;}})\n\t\t.int16le('DailySessionMaxCellVolt',\t\t{ formatter: (x) => {return x/1000;}})\n\t\t.int16le('DailySessionMinSupplyVolt',\t{ formatter: (x) => {return x/100;}})\n\t\t.int16le('DailySessionMaxSupplyVolt',\t{ formatter: (x) => {return x/100;}})\n\t\t.uint8('DailySessionMinReportTemp',\t\t{ formatter: (x) => {return x-40;}}) // temperature ºC\n\t\t.uint8('DailySessionMaxReportTemp',\t\t{ formatter: (x) => {return x-40;}}) // temperature ºC\n\t\t.int16le('DailySessionMinShuntVolt',\t{ formatter: (x) => {return x/100;}})\n\t\t.int16le('DailySessionMaxShuntVolt',\t{ formatter: (x) => {return x/100;}})\n\t\t.uint8('DailySessionMinShuntSoc', \t\t{ formatter: (x) => {return (x-5)/2;}}) // percent\n\t\t.uint8('DailySessionMaxShuntSoc', \t\t{ formatter: (x) => {return (x-5)/2;}}) // percent\n\t\t.uint8('DailySessionThermalBandA',\t\t{ formatter: (x) => {return x/10;}}) // hours\n\t\t.uint8('DailySessionThermalBandB',\t\t{ formatter: (x) => {return x/10;}}) // hours\n\t\t.uint8('DailySessionThermalBandC',\t\t{ formatter: (x) => {return x/10;}}) // hours\n\t\t.uint8('DailySessionThermalBandD',\t\t{ formatter: (x) => {return x/10;}}) // hours\n\t\t.uint8('DailySessionThermalBandE',\t\t{ formatter: (x) => {return x/10;}}) // hours\n\t\t.uint8('DailySessionThermalBandF',\t\t{ formatter: (x) => {return x/10;}}) // hours\n\t\t.uint8('DailySessionThermalBandG',\t\t{ formatter: (x) => {return x/10;}}) // hours\n\t\t.uint8('DailySessionThermalBandH',\t\t{ formatter: (x) => {return x/10;}}) // hours\n\t\t.uint8('DailySessionSocBandA',\t\t\t{ formatter: (x) => {return x/10;}}) // hours\n\t\t.uint8('DailySessionSocBandB',\t\t\t{ formatter: (x) => {return x/10;}}) // hours\n\t\t.uint8('DailySessionSocBandC',\t\t\t{ formatter: (x) => {return x/10;}}) // hours\n\t\t.uint8('DailySessionSocBandD',\t\t\t{ formatter: (x) => {return x/10;}}) // hours\n\t\t.uint8('DailySessionSocBandE',\t\t\t{ formatter: (x) => {return x/10;}}) // hours\n\t\t.uint8('DailySessionSocBandF',\t\t\t{ formatter: (x) => {return x/10;}}) // hours\n\t\t.uint8('DailySessionSocBandG',\t\t\t{ formatter: (x) => {return x/10;}}) // hours\n\t\t.uint8('DailySessionSocBandH',\t\t\t{ formatter: (x) => {return x/10;}}) // hours\n\t\t.int16le('DailySessionShuntPeakCharge',{ formatter: (x) => {return x/100;}}) // amps\n\t\t.int16le('DailySessionShuntPeakDischg',{ formatter: (x) => {return x/100;}}) // amps\n\t\t.uint8('DailySessionCriticalEvents')\n\t\t.int32le('DailySessionStartTime') \t// Epoch\n\t\t.int32le('DailySessionFinishTime')  // Epoch\n\t\t.floatle('DailySessionCumulShuntAhCharge',{ formatter: (x) => {return x/1000;}})  // Ah\n\t\t.floatle('DailySessionCumulShuntAhDischg',{ formatter: (x) => {return x/1000;}})  // Ah\n\t\t.floatle('DailySessionCumulShuntkWhCharge',{ formatter: (x) => {return x/1000;}}) // kWh\n\t\t.floatle('DailySessionCumulShuntkWhDischg',{ formatter: (x) => {return x/1000;}}) // kWh\n\t\t\n  \nmsg.payload = typea.parse(buf);\n\n// convert date(s)\nmsg.payload.DailySessionStartTime = new Date(msg.payload.DailySessionStartTime*1000);\nmsg.payload.DailySessionFinishTime = new Date(msg.payload.DailySessionFinishTime*1000);\n\nreturn msg;","outputs":1,"noerr":0,"x":950,"y":1020,"wires":[["c2073a30.cdca48","7b80d4ee.147e3c","9491e91.23d8a18"]]},{"id":"52f1bf25.ba178","type":"function","z":"703f4458.ff2d1c","name":"Msg_5632_LifetimeMetrics","func":"var Packet = global.get('binary_parser');\nvar buf = msg.payload;\n\nvar typea = new Packet()\n\t\t.skip(8)\n\t\t.uint32le('FirstSyncTime') \t\t\t// Epoch\n\t\t.uint32le('LifeCountStartup') \n\t\t.uint32le('LifeCountCriticalBattOk') \n\t\t.uint32le('LifeCountChargeOn') \n\t\t.uint32le('LifeCountChargeLimp') \n\t\t.uint32le('LifeCountDischgOn') \n\t\t.uint32le('LifeCountDischgLimp') \n\t\t.uint32le('LifeCountHeatOn') \n\t\t.uint32le('LifeCountCoolOn') \n\t\t.int16le( 'LifeCountDailySession') \n\t\t.uint32le('RecentTimeCriticalOn') \t// Epoch\n\t\t.uint32le('RecentTimeCriticalOff') \t// Epoch\n\t\t.uint32le('RecentTimeChargeOn') \t// Epoch\n\t\t.uint32le('RecentTimeChargeOff') \t// Epoch\n\t\t.uint32le('RecentTimeChargeLimp') \t// Epoch\n\t\t.uint32le('RecentTimeDischgOn') \t// Epoch\n\t\t.uint32le('RecentTimeDischgOff') \t// Epoch\n\t\t.uint32le('RecentTimeDischgLimp') \t// Epoch\n\t\t.uint32le('RecentTimeHeatOn') \t\t// Epoch\n\t\t.uint32le('RecentTimeHeatOff') \t\t// Epoch\n\t\t.uint32le('RecentTimeCoolOn') \t\t// Epoch\n\t\t.uint32le('RecentTimeCoolOff') \t\t// Epoch\n\t\t.uint32le('RecentTimeBypassInitial') // Epoch\n\t\t.uint32le('RecentTimeBypassComplete') // Epoch\n\t\t.uint32le('RecentTimeBypassTest') \t// Epoch\n\t\t.uint8('SystemBypassTestOutcome')  /* Choices BypassTestOutcomes\n\t\t\tNotTested = 0,\n\t\t\tPreparing = 1,\n\t\t\tTesting = 2,\n\t\t\tPassOk = 3,\n\t\t\tFailed = 4, */\n\t\t.uint32le('RecentTimeWizardSetup') // Epoch\n\t\t.uint32le('RecentTimeBypassExtra') // Epoch\n\n  \nmsg.payload = typea.parse(buf);\n\n// convert date(s)\nmsg.payload.FirstSyncTime = new Date(msg.payload.FirstSyncTime*1000);\nmsg.payload.RecentTimeCriticalOn = new Date(msg.payload.RecentTimeCriticalOn*1000);\nmsg.payload.RecentTimeCriticalOff = new Date(msg.payload.RecentTimeCriticalOff*1000);\nmsg.payload.RecentTimeChargeOn = new Date(msg.payload.RecentTimeChargeOn*1000);\nmsg.payload.RecentTimeChargeOff = new Date(msg.payload.RecentTimeChargeOff*1000);\nmsg.payload.RecentTimeChargeLimp = new Date(msg.payload.RecentTimeChargeLimp*1000);\nmsg.payload.RecentTimeDischgOn = new Date(msg.payload.RecentTimeDischgOn*1000);\nmsg.payload.RecentTimeDischgOff = new Date(msg.payload.RecentTimeDischgOff*1000);\nmsg.payload.RecentTimeDischgLimp = new Date(msg.payload.RecentTimeDischgLimp*1000);\nmsg.payload.RecentTimeHeatOn = new Date(msg.payload.RecentTimeHeatOn*1000);\nmsg.payload.RecentTimeHeatOff = new Date(msg.payload.RecentTimeHeatOff*1000);\nmsg.payload.RecentTimeCoolOn = new Date(msg.payload.RecentTimeCoolOn*1000);\nmsg.payload.RecentTimeCoolOff = new Date(msg.payload.RecentTimeCoolOff*1000);\nmsg.payload.RecentTimeBypassInitial = new Date(msg.payload.RecentTimeBypassInitial*1000);\nmsg.payload.RecentTimeBypassComplete = new Date(msg.payload.RecentTimeBypassComplete*1000);\nmsg.payload.RecentTimeBypassTest = new Date(msg.payload.RecentTimeBypassTest*1000);\nmsg.payload.RecentTimeWizardSetup = new Date(msg.payload.RecentTimeWizardSetup*1000);\nmsg.payload.RecentTimeBypassExtra = new Date(msg.payload.RecentTimeBypassExtra*1000);\n\nswitch(msg.payload.SystemBypassTestOutcome) {\n    case 0:\n        msg.payload.SystemBypassTestOutcome = \"NotTested\";\n        break;\n    case 1:\n        msg.payload.SystemBypassTestOutcome = \"Preparing\";\n        break;\n    case 2:\n        msg.payload.SystemBypassTestOutcome = \"Testing\";\n        break;\n    case 3:\n        msg.payload.SystemBypassTestOutcome = \"PassOk\";\n        break;\n    case 4:\n        msg.payload.SystemBypassTestOutcome = \"Failed\";\n        break;\n    default:\n        msg.payload.SystemBypassTestOutcome = \"Buggered\";\n}\n\nreturn msg;","outputs":1,"noerr":0,"x":960,"y":1220,"wires":[["56f8ce75.42528"]]},{"id":"56f8ce75.42528","type":"debug","z":"703f4458.ff2d1c","name":"","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","x":1330,"y":1220,"wires":[]},{"id":"7eae0fb4.a000b","type":"function","z":"703f4458.ff2d1c","name":"Msg_4a35_HwSystemSetup","func":"var Packet = global.get('binary_parser');\nvar buf = msg.payload;\n\nvar typea = new Packet()\n\t\t.skip(8)\n\t\t.int16le('HwSystemSetupVers')\n\t\t.string('SystemCode', \t{ encoding: 'ascii', length: 8 })\n\t\t.string('SysName', \t\t{ encoding: 'ascii', length: 20 })\n\t\t.string('AssetCode', \t{ encoding: 'ascii', length: 20 })\n\t\t.uint8('AllowTechAuth') \t\t// boolean 0 = Off , 1 = On\n\t\t.uint8('AllowQuickSession') \t// boolean 0 = Off , 1 = On\n\t\t.uint32le('QuickSessionInterval', { formatter: (x) => {return x/1000;}})  // seconds\n\t\t.int16le('SystemPresetId')\n\t\t.int16le('SystemFirmwareVersion')\n\t\t.int16le('SystemHardwareVersion')\n\t\t.uint32le('SystemSerialNo')\n\t\t.uint8('ShowScheduler') \t\t// boolean 0 = Off , 1 = On\n\t\t.uint8('ShowStripCycle') \t\t// boolean 0 = Off , 1 = On\n\t\t\nmsg.payload = typea.parse(buf);\nreturn msg;","outputs":1,"noerr":0,"x":960,"y":1320,"wires":[["eb9d9d34.46357"]]},{"id":"eb9d9d34.46357","type":"debug","z":"703f4458.ff2d1c","name":"","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","x":1330,"y":1320,"wires":[]},{"id":"43c64246.d3347c","type":"function","z":"703f4458.ff2d1c","name":"Msg_4d33_HwExpansionSetup","func":"var Packet = global.get('binary_parser');\nvar buf = msg.payload;\n\nvar typea = new Packet()\n\t\t.skip(8)\n\t\t.uint8('HwExpansionSetupVers')  \n\t\t.uint8('HwExpansionTemplate')  /* ExtensionTemplateOptions\n\t\t\t\tNone = 0,\n\t\t\t\tExpansionBoard 12v = 1,\n\t\t\t\tExpansionBoard 48v = 2,\n\t\t\t\tWatchMonCmC v2.0   = 3,\t*/\t\n\t\t.uint8('HwExpansionNeoPixelMode')  /* NeoPixelExtStatusModes\n\t\t\t\tNone \t\t\t\t= 0,\n\t\t\t\tRepeat \t\t\t\t= 1,\n\t\t\t\tStatus + 7seg SoC% \t= 2,\n\t\t\t\tSolid SoC% 8seg \t= 3,\t*/\n\t\t.uint8('HwExpansionRelay1')  /* ExpansionOutputAssignments\n\t\t\t\tNone = 0,\n\t\t\t\tManualOn = 1,\n\t\t\t\tCritical BattOk = 2,\n\t\t\t\tCharging On = 4,\n\t\t\t\tDischarging On = 5,\n\t\t\t\tHeating Required = 6,\n\t\t\t\tCooling Required = 7,\n\t\t\t\tRun / Idle input = 8,\n\t\t\t\tCharge / Normal input = 9,\n\t\t\t\tBypass Complete = 10,\n\t\t\t\tCharging Limited = 11,\n\t\t\t\tDischarging Limited = 12,\n\t\t\t\tCritical Recovery = 13,\n\t\t\t\tCritical PulseOn = 14,\n\t\t\t\tCritical PulseOff = 15,\n\t\t\t\tCritical Fault = 16,\n\t\t\t\tCritical PrechargeTimer = 17, */\n\t\t.uint8('HwExpansionRelay2')  \t/* ExpansionOutputAssignments */\n\t\t.uint8('HwExpansionRelay3')  \t/* ExpansionOutputAssignments */\n\t\t.uint8('HwExpansionRelay4')\t\t/* ExpansionOutputAssignments */\n\t\t.uint8('HwExpansionOutput5')  \t/* ExpansionOutputAssignments */\n\t\t.uint8('HwExpansionOutput5')  \t/* ExpansionOutputAssignments */\n\t\t.uint8('HwExpansionOutput7')  \t/* ExpansionOutputAssignments */\n\t\t.uint8('HwExpansionOutput8')  \t/* ExpansionOutputAssignments */\n\t\t.uint8('HwExpansionOutput9')  \t/* ExpansionOutputAssignments */\n\t\t.uint8('HwExpansionOutput10') \t/* ExpansionOutputAssignments */\n\t\t.uint8('HwExpansionInput1')  \t/* ExtensionInputOptions\n\t\t\t\tNone \t\t\t\t\t= 0,\n\t\t\t\tRun / Idle mode \t\t= 1,\n\t\t\t\tCharge / Normal mode \t= 2,\n\t\t\t\tCritical contact sensor - On = 3,\n\t\t\t\tCritical contact sensor - Fault = 4, */\n\t\t.uint8('HwExpansionInput2')  \t/* ExtensionInputOptions */\n\t\t.uint8('HwExpansionInput3')  \t/* ExtensionInputOptions */\n\t\t.uint8('HwExpansionInput4')  \t/* ExtensionInputOptions */\n\t\t.uint8('HwExpansionInput5')  \t/* ExtensionInputOptions */\n\t\t.uint8('HwExpansionInputAIN1') \n\t\t.uint8('HwExpansionInputAIN2') \n\t\t.int16le('HwExpansionCustomFeature1')\n\t\t.int16le('HwExpansionCustomFeature2')\n\n  \nmsg.payload = typea.parse(buf);\n\n\nswitch(msg.payload.HwExpansionTemplate) {\n    case 0:\n        msg.payload.HwExpansionTemplate = \"None\";\n        break;\n    case 1:\n        msg.payload.HwExpansionTemplate = \"ExpansionBoard 12v\";\n        break;\n    case 2:\n        msg.payload.HwExpansionTemplate = \"ExpansionBoard 48v\";\n        break;\n    case 3:\n        msg.payload.HwExpansionTemplate = \"WatchMonCmC v2.0\";\n        break;\n    default:\n        msg.payload.HwExpansionTemplate = \"Buggered\";\n}\n\nswitch(msg.payload.HwExpansionNeoPixelMode) {\n    case 0:\n        msg.payload.HwExpansionNeoPixelMode = \"None\";\n        break;\n    case 1:\n        msg.payload.HwExpansionNeoPixelMode = \"Repeat\";\n        break;\n    case 2:\n        msg.payload.HwExpansionNeoPixelMode = \"Status + 7seg SoC%\";\n        break;\n    case 3:\n        msg.payload.HwExpansionNeoPixelMode = \"Solid SoC% 8seg\";\n        break;\n    default:\n        msg.payload.HwExpansionNeoPixelMode = \"Buggered\";\n}\n\nswitch(msg.payload.HwExpansionRelay1) {\n    case 0:\n        msg.payload.HwExpansionRelay1 = \"None\";\n        break;\n    case 1:\n        msg.payload.HwExpansionRelay1 = \"ManualOn\";\n        break;\n    case 2:\n        msg.payload.HwExpansionRelay1 = \"Critical BattOk\";\n        break;\n    case 3:\n        msg.payload.HwExpansionRelay1 = \"Charging On\";\n        break;\n    case 4:\n        msg.payload.HwExpansionRelay1 = \"Discharging On\";\n        break;\n    case 5:\n        msg.payload.HwExpansionRelay1 = \"Heating Required\";\n        break;\n    case 6:\n        msg.payload.HwExpansionRelay1 = \"Cooling Required\";\n        break;\n    case 7:\n        msg.payload.HwExpansionRelay1 = \"Run / Idle input\";\n        break;\n    case 8:\n        msg.payload.HwExpansionRelay1 = \"Charge / Normal input\";\n        break;\n    case 9:\n        msg.payload.HwExpansionRelay1 = \"Bypass Complete\";\n        break;\n    case 10:\n        msg.payload.HwExpansionRelay1 = \"Charging Limited\";\n        break;\n    case 11:\n        msg.payload.HwExpansionRelay1 = \"Discharging Limited\";\n        break;\n    case 12:\n        msg.payload.HwExpansionRelay1 = \"Critical Recovery\";\n        break;\n    case 13:\n        msg.payload.HwExpansionRelay1 = \"Critical PulseOn\";\n        break;\n    case 14:\n        msg.payload.HwExpansionRelay1 = \"Critical PulseOff\";\n        break;\n    case 105:\n        msg.payload.HwExpansionRelay1 = \"Critical Fault\";\n        break;\n    case 16:\n        msg.payload.HwExpansionRelay1 = \"Critical PrechargeTimer\";\n        break;\n    default:\n        msg.payload.HwExpansionRelay1 = \"Buggered\";\n}\n\nswitch(msg.payload.HwExpansionInput1) {\n    case 0:\n        msg.payload.HwExpansionInput1 = \"None\";\n        break;\n    case 1:\n        msg.payload.HwExpansionInput1 = \"Run / Idle mode\";\n        break;\n    case 2:\n        msg.payload.HwExpansionInput1 = \"Charge / Normal mode\";\n        break;\n    case 3:\n        msg.payload.HwExpansionInput1 = \"Critical contact sensor - On\";\n        break;\n    case 4:\n        msg.payload.HwExpansionInput1 = \"Critical contact sensor - Fault\";\n        break;\n    default:\n        msg.payload.HwExpansionInput1 = \"Buggered\";\n}\n\n\nreturn msg;","outputs":1,"noerr":0,"x":970,"y":1620,"wires":[["bc0509b1.23d0a8"]]},{"id":"bc0509b1.23d0a8","type":"debug","z":"703f4458.ff2d1c","name":"","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","x":1330,"y":1620,"wires":[]},{"id":"546b2ffc.2dc2d","type":"function","z":"703f4458.ff2d1c","name":"Msg_4b35_HwCellGroupSetup","func":"var Packet = global.get('binary_parser');\nvar buf = msg.payload;\n\nvar typea = new Packet()\n\t\t.skip(8)\n\t\t.uint8('HwCellmonSetupVers')  \n\t\t.uint8('HwCellmonBattTypeID')  /* BattTypes\n\t\t\t\tCustom \t\t\t\t= 0,\n\t\t\t\tLi-FePO4 Typical \t= 1,\n\t\t\t\tLi-Ion Performance \t= 2,\n\t\t\t\tLi-Ion LongLife \t= 3, \n\t\t\t\tLi-FePO4 Longlife \t= 4, */\n\t\t.uint8(  'HwCellmonFirstID')  \n\t\t.uint8(  'HwCellmonLastID')  \t\n\t\t.int16le('HwCellmonNomCellVolt', \t\t{ formatter: (x) => {return x/1000;}})\n\t\t.int16le('HwCellmonLoCellVolt', \t\t{ formatter: (x) => {return x/1000;}})\n\t\t.int16le('HwCellmonHiCellVolt',\t\t\t{ formatter: (x) => {return x/1000;}})\n\t\t.int16le('HwCellmonBypassVoltLevel',\t{ formatter: (x) => {return x/1000;}})\n\t\t.int16le('HwCellmonBypassAmpLimit', \t{ formatter: (x) => {return x/1000;}})\n\t\t.uint8( 'HwCellmonBypassTempLimit',\t\t{ formatter: (x) => {return x-40;}}) // temperature ºC\n\t\t.uint8( 'HwCellmonLoCellTemp',\t\t\t{ formatter: (x) => {return x-40;}}) // temperature ºC\n\t\t.uint8( 'HwCellmonHiCellTemp',\t\t\t{ formatter: (x) => {return x-40;}}) // temperature ºC\n\t\t.uint8( 'HwCellmonDiffNomCellsInSeries')  \t// Boolean 0 = Off , 1 = On\n\t\t.uint8( 'HwCellmonNomCellsInSeries') \n\t\t.uint8( 'HwCellmonAllowEntireRange')  \t\t// Boolean 0 = Off , 1 = On\n\t\t.uint8( 'HwCellmonEntireFirstID')  \n\t\t.uint8( 'HwCellmonEntireLastID')  \n\t\t.uint8( 'HwCellmonBypassExtraMode')  /* BypassExtraModes\n\t\t\t\tNone \t\t\t= 0,\n\t\t\t\tIdle Shunt \t\t= 1,\n\t\t\t\tSame CellVolt \t= 2,\n\t\t\t\tAutoLevel \t\t= 3, */\n\t\t.int16le('HwCellmonBypassExtraInterval',\t\t{ formatter: (x) => {return x/1000;}}) \t// seconds\n\t\t.uint8(  'HwCellmonCellMonTypeID')  /* CellMonTypes\n\t\t\t\tCustom \t\t= 0,\n\t\t\t\tGenMon 2W \t= 1,\n\t\t\t\tGenMon 8W \t= 2,\n\t\t\t\tLongMon \t= 3,\n\t\t\t\tBlockMonM8 \t= 4,\n\t\t\t\tBlockMonM14 = 5,\n\t\t\t\tEndMon \t\t= 6,\n\t\t\t\tManyMon \t= 7, */\n\t\t.floatle('HwCellmonBypassImpedance', \t\t\t{ formatter: (x) => {return x/1000;}})\n\t\t.int16le('HwCellmonBypassLoVoltCutout', \t\t{ formatter: (x) => {return x/1000;}})\n\t\t.int16le('HwCellmonBypassShuntChargeLimit', \t{ formatter: (x) => {return x/100;}}) \t// amps\n\t\t.int16le('HwCellmonBypassShuntDischgLimit', \t{ formatter: (x) => {return x/100;}}) \t// amps\n\t\t.uint8(  'HwCellmonBypassShuntSocLo', \t\t\t{ formatter: (x) => {return (x-5)/2;}}) // percent\n\t\t.int16le('HwCellmonBypassCellVoltBanding', \t\t{ formatter: (x) => {return x/1000;}})\n\t\t.int16le('HwCellmonBypassCellVoltDiff', \t\t{ formatter: (x) => {return x/1000;}})\n\t\t.int16le('HwCellmonBypassStableInterval',\t\t{ formatter: (x) => {return x/1000;}}) // seconds\n\t\t.int16le('HwCellmonBypassExtraAmpLimit', \t\t{ formatter: (x) => {return x/1000;}}) // amps\n\n  \nmsg.payload = typea.parse(buf);\n\nswitch(msg.payload.HwCellmonBattTypeID) {\n    case 0:\n        msg.payload.HwCellmonBattTypeID = \"Custom\";\n        break;\n    case 1:\n        msg.payload.HwCellmonBattTypeID = \"Li-FePO4 Typical\";\n        break;\n    case 2:\n        msg.payload.HwCellmonBattTypeID = \"Li-Ion Performance\";\n        break;\n    case 3:\n        msg.payload.HwCellmonBattTypeID = \"Li-Ion LongLife\";\n        break;\n    case 4:\n        msg.payload.HwCellmonBattTypeID = \"Li-FePO4 Longlife\";\n        break;\n    default:\n        msg.payload.HwCellmonBattTypeID = \"Buggered\";\n}\n\nswitch(msg.payload.HwCellmonBypassExtraMode) {\n    case 0:\n        msg.payload.HwCellmonBypassExtraMode = \"None\";\n        break;\n    case 1:\n        msg.payload.HwCellmonBypassExtraMode = \"Idle Shunt\";\n        break;\n    case 2:\n        msg.payload.HwCellmonBypassExtraMode = \"Same CellVolt\";\n        break;\n    case 3:\n        msg.payload.HwCellmonBypassExtraMode = \"AutoLevel\";\n        break;\n    default:\n        msg.payload.HwCellmonBypassExtraMode = \"Buggered\";\n}\n\nswitch(msg.payload.HwCellmonCellMonTypeID) {\n    case 0:\n        msg.payload.HwCellmonCellMonTypeID = \"Custom\";\n        break;\n    case 1:\n        msg.payload.HwCellmonCellMonTypeID = \"GenMon 2W\";\n        break;\n    case 2:\n        msg.payload.HwCellmonCellMonTypeID = \"GenMon 8W\";\n        break;\n    case 3:\n        msg.payload.HwCellmonCellMonTypeID = \"LongMon\";\n        break;\n    case 4:\n        msg.payload.HwCellmonCellMonTypeID = \"BlockMonM8\";\n        break;\n    case 5:\n        msg.payload.HwCellmonCellMonTypeID = \"BlockMonM14\";\n        break;\n    case 6:\n        msg.payload.HwCellmonCellMonTypeID = \"EndMon\";\n        break;\n    case 7:\n        msg.payload.HwCellmonCellMonTypeID = \"ManyMon\";\n        break;\n    default:\n        msg.payload.HwCellmonCellMonTypeID = \"Buggered\";\n}\n\n\nreturn msg;","outputs":1,"noerr":0,"x":970,"y":1420,"wires":[["88e465ed.53d958"]]},{"id":"a096b38a.31d4","type":"function","z":"703f4458.ff2d1c","name":"Msg_4c33_HwShuntSetup","func":"var Packet = global.get('binary_parser');\nvar buf = msg.payload;\n\nvar typea = new Packet()\n\t\t.skip(8)\n\t\t.uint8('HwShuntShuntType')  /* ShuntTypes\n\t\t\t\tNone            \t\t\t\t= 0,\n\t\t\t\tSFP102MOD 100uOhm 375A 150V \t= 1, \n\t\t\t\tSFP101EVB 72uOhm 500A 150V     \t= 2,\n\t\t\t\tSFP101EVB 25uOhm 1500A 150V \t= 3,\n\t\t\t\tSFP102MOD (4k) 375A 750V  \t\t= 4, \n\t\t\t\tSFP102MOD (3k) 375A 600V   \t\t= 5, \n\t\t\t\tSFP102MOD Negative volt sense  \t= 6,\n\t\t\t\tSFP102MOD 50uOhm 750A 150V \t\t= 7, \n\t\t\t\tShuntMon2 50uOhm 500A 650V \t\t= 16, */\n\t\t.int16le('HwShuntScale16volt')\n\t\t.int16le('HwShuntScale16amp')\n\t\t.int16le('HwShuntChargeIdle',\t{ formatter: (x) => {return x/100;}})   // amps\n\t\t.int16le('HwShuntDischgIdle',\t{ formatter: (x) => {return x/100;}})\t// amps\n\t\t.uint8( 'HwShuntSocCountLo', \t{ formatter: (x) => {return (x-5)/2;}}) // percent\n\t\t.uint8( 'HwShuntSocCountHi', \t{ formatter: (x) => {return (x-5)/2;}}) // percent\n\t\t.uint8( 'HwShuntSocLoRecal', \t{ formatter: (x) => {return (x-5)/2;}}) // percent\n\t\t.uint8( 'HwShuntSocHiRecal', \t{ formatter: (x) => {return (x-5)/2;}}) // percent\n\t\t.uint8( 'HwShuntMonitorSocLoRecal') \t// boolean 0 = Off , 1 = On\n\t\t.uint8( 'HwShuntMonitorSocHiRecal') \t// boolean 0 = Off , 1 = On\n\t\t.uint8( 'HwShuntMonitorInBypassRecal')\t// boolean 0 = Off , 1 = On\n\t\t.floatle('HwShuntNomCapacity',\t{ formatter: (x) => {return x/1000;}})\t// Ah\n\t\t.floatle('HwShuntGainVolt')\n\t\t.floatle('HwShuntGainAmp')\n\t\t.floatle('HwShuntGainAcculm')\t// mAh\n\t\t.floatle('HwShuntGainTemp') \t// temperature ºC\n\t\t.uint8( 'HwShuntReverseFlow') \t// boolean 0 = Off , 1 = On\n\t\t.uint8( 'HwShuntSetupVers') \n\t\t.floatle('HwShuntGainVA')\n\t\t.floatle('HwShuntGainVAh')\t\n\t\t.int16le('HwShuntMax16volt')\n\t\t.int16le('HwShuntMax16charge')\n\t\t.int16le('HwShuntMax16dischg')\n\n  \nmsg.payload = typea.parse(buf);\n\nswitch(msg.payload.HwShuntShuntType) {\n    case 0:\n        msg.payload.HwShuntShuntType = \"None\";\n        break;\n    case 1:\n        msg.payload.HwShuntShuntType = \"SFP102MOD 100uOhm 375A 150V\";\n        break;\n    case 2:\n        msg.payload.HwShuntShuntType = \"SFP101EVB 72uOhm 500A 150V\";\n        break;\n    case 3:\n        msg.payload.HwShuntShuntType = \"SFP101EVB 25uOhm 1500A 150V\";\n        break;\n    case 4:\n        msg.payload.HwShuntShuntType = \"SFP102MOD (4k) 375A 750V\";\n        break;\n    case 5:\n        msg.payload.HwShuntShuntType = \"SFP102MOD (3k) 375A 600V\";\n        break;\n    case 6:\n        msg.payload.HwShuntShuntType = \"SFP102MOD Negative volt sense\";\n        break;\n    case 7:\n        msg.payload.HwShuntShuntType = \"SFP102MOD 50uOhm 750A 150V\";\n        break;\n    case 16:\n        msg.payload.HwShuntShuntType = \"ShuntMon2 50uOhm 500A 650V\";\n        break;\n    default:\n        msg.payload.HwShuntShuntType = \"Buggered\";\n}\n\n\n\n\nreturn msg;","outputs":1,"noerr":0,"x":960,"y":1520,"wires":[["e2ce7e39.7236d"]]},{"id":"1fc37c79.13c0f4","type":"function","z":"703f4458.ff2d1c","name":"Msg_5334_HwIntegrationSetup","func":"var Packet = global.get('binary_parser');\nvar buf = msg.payload;\n\nvar typea = new Packet()\n\t\t.skip(8)\n\t\t.uint8('HwIntegrationSetupVers')  \n\t\t.uint8('HwIntegrationUsbTxBroadcast')  \t\t// boolean 0 = Off , 1 = On\n\t\t.uint8('HwIntegrationWifiUdpTxBroadcast') \t// boolean 0 = Off , 1 = On\n\t\t.uint8('HwIntegrationWifiBroadcastMode') /* WifiBroadcastModes\n\t\t\t\tNone \t\t= 0,\n\t\t\t\tVerbose \t= 1,\n\t\t\t\tVerbose ReadOnly = 4,\n\t\t\t\tLimited \t= 2,\n\t\t\t\tDisabled \t= 3, */\n\t\t.uint8('HwIntegrationCanbusTxBroadcast') \t// boolean 0 = Off , 1 = On\n\t\t.uint8('HwIntegrationCanbusMode') /* CanbusModes\n\t\t\t\tNone   \t\t= 0,\n\t\t\t\tNative \t\t= 1,\n\t\t\t\tElcon TCCharger = 2,\n\t\t\t\tEnPower Charger500k = 3,\n\t\t\t\tSolax PowerSK control = 4,\n\t\t\t\tSma SunnyIsland V31 = 5,\n\t\t\t\tBrusa NLG5 \t= 6,\n\t\t\t\tEnPower Charger 250k = 7,\n\t\t\t\tSolax PowerSK Limited = 8,\n\t\t\t\tBrusa NLG6 \t= 9,\n\t\t\t\tProject Lychee = 10,\n\t\t\t\tEltek FlatPack2 HE2000/48 = 11,\n\t\t\t\tProject42 \t= 42,\t*/\n\t\t.uint32le('HwIntegrationCanbusRemoteAddr')\n\t\t.uint32le('HwIntegrationCanbusBaseAddr')\n\t\t.uint32le('HwIntegrationCanbusGroupAddr')\n  \nmsg.payload = typea.parse(buf);\n\nswitch(msg.payload.HwIntegrationWifiBroadcastMode) {\n    case 0:\n        msg.payload.HwIntegrationWifiBroadcastMode = \"None\";\n        break;\n    case 1:\n        msg.payload.HwIntegrationWifiBroadcastMode = \"Verbose\";\n        break;\n    case 2:\n        msg.payload.HwIntegrationWifiBroadcastMode = \"Limited\";\n        break;\n    case 3:\n        msg.payload.HwIntegrationWifiBroadcastMode = \"Disabled\";\n        break;\n    case 4:\n        msg.payload.HwIntegrationWifiBroadcastMode = \"Verbose ReadOnly\";\n        break;\n    default:\n        msg.payload.HwIntegrationWifiBroadcastMode = \"Buggered\";\n}\n\nswitch(msg.payload.HwExpansionRelay1) {\n    case 0:\n        msg.payload.HwExpansionRelay1 = \"None\";\n        break;\n    case 1:\n        msg.payload.HwExpansionRelay1 = \"Native\";\n        break;\n    case 2:\n        msg.payload.HwExpansionRelay1 = \"Elcon TCCharger\";\n        break;\n    case 3:\n        msg.payload.HwExpansionRelay1 = \"EnPower Charger500k\";\n        break;\n    case 4:\n        msg.payload.HwExpansionRelay1 = \"Solax PowerSK control\";\n        break;\n    case 5:\n        msg.payload.HwExpansionRelay1 = \"Sma SunnyIsland V31\";\n        break;\n    case 6:\n        msg.payload.HwExpansionRelay1 = \"Brusa NLG5\";\n        break;\n    case 7:\n        msg.payload.HwExpansionRelay1 = \"EnPower Charger 250k\";\n        break;\n    case 8:\n        msg.payload.HwExpansionRelay1 = \"Solax PowerSK Limited\";\n        break;\n    case 9:\n        msg.payload.HwExpansionRelay1 = \"Brusa NLG6\";\n        break;\n    case 10:\n        msg.payload.HwExpansionRelay1 = \"Project Lychee\";\n        break;\n    case 11:\n        msg.payload.HwExpansionRelay1 = \"Eltek FlatPack2 HE2000/48\";\n        break;\n    case 42:\n        msg.payload.HwExpansionRelay1 = \"roject42\";\n        break;\n    default:\n        msg.payload.HwExpansionRelay1 = \"Buggered\";\n}\n\n\n\nreturn msg;","outputs":1,"noerr":0,"x":970,"y":1720,"wires":[["8193dd34.c3bf4"]]},{"id":"8193dd34.c3bf4","type":"debug","z":"703f4458.ff2d1c","name":"","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","x":1330,"y":1720,"wires":[]},{"id":"4454fbeb.58fc54","type":"function","z":"703f4458.ff2d1c","name":"Msg_4f33_ControlCriticalSetup","func":"var Packet = global.get('binary_parser');\nvar buf = msg.payload;\n\nvar typea = new Packet()\n\t\t.skip(8)\n\t\t.uint8( 'ControlCriticalMode')   /* Choices ControlCriticalModes\n\t\t\t\tAuto \t\t\t= 0,\n\t\t\t\tManually On \t= 1,\n\t\t\t\tManually Off  \t= 2, */\t\n\t\t.uint8( 'ControlCriticalAutoRecovery')  \t\t\t// boolean 0 = Off , 1 = On\n\t\t.uint8( 'ControlCriticalIgnoreCellsOverdue') \t\t// boolean 0 = Off , 1 = On\n\t\t.uint8( 'ControlCriticalMonitorCellVoltLo') \t\t// boolean 0 = Off , 1 = On\n\t\t.uint8( 'ControlCriticalMonitorCellVoltHi') \t\t// boolean 0 = Off , 1 = On\n\t\t.int16le('ControlCriticalCellVoltLo',\t\t\t\t{ formatter: (x) => {return x/1000;}})\n\t\t.int16le('ControlCriticalCellVoltHi',\t\t\t\t{ formatter: (x) => {return x/1000;}})\n\t\t.uint8( 'ControlCriticalMonitorCellTempLo') \t\t// boolean 0 = Off , 1 = On\n\t\t.uint8( 'ControlCriticalMonitorCellTempHi') \t\t// boolean 0 = Off , 1 = On\n\t\t.uint8( 'ControlCriticalCellTempLo',\t\t\t\t{ formatter: (x) => {return x-40;}}) // temperature ºC\n\t\t.uint8( 'ControlCriticalCellTempHi',\t\t\t\t{ formatter: (x) => {return x-40;}}) // temperature ºC\n\t\t.uint8( 'ControlCriticalMonitorSupplyLo') \t\t\t// boolean 0 = Off , 1 = On\n\t\t.uint8( 'ControlCriticalMonitorSupplyHi') \t\t\t// boolean 0 = Off , 1 = On\n\t\t.int16le('ControlCriticalSupplyVoltLo',\t\t\t\t{ formatter: (x) => {return x/100;}})\n\t\t.int16le('ControlCriticalSupplyVoltHi',\t\t\t\t{ formatter: (x) => {return x/100;}})\n\t\t.uint8( 'ControlCriticalMonitorAmbientLo') \t\t\t// boolean 0 = Off , 1 = On\n\t\t.uint8( 'ControlCriticalMonitorAmbientHi') \t\t\t// boolean 0 = Off , 1 = On\n\t\t.uint8( 'ControlCriticalAmbientTempLo',\t\t\t\t{ formatter: (x) => {return x-40;}}) // temperature ºC\n\t\t.uint8( 'ControlCriticalAmbientTempHi',\t\t\t\t{ formatter: (x) => {return x-40;}}) // temperature ºC\n\t\t.uint8( 'ControlCriticalMonitorShuntVoltLo') \t\t// boolean 0 = Off , 1 = On\n\t\t.uint8( 'ControlCriticalMonitorShuntVoltHi') \t\t// boolean 0 = Off , 1 = On\n\t\t.uint8( 'ControlCriticalMonitorShuntVoltLoIdle') \t// boolean 0 = Off , 1 = On\n\t\t.int16le('ControlCriticalShuntVoltLo',\t\t\t\t{ formatter: (x) => {return x/100;}})\n\t\t.int16le('ControlCriticalShuntVoltHi',\t\t\t\t{ formatter: (x) => {return x/100;}})\n\t\t.int16le('ControlCriticalShuntVoltLoIdle',\t\t\t{ formatter: (x) => {return x/100;}})\n\t\t.uint8(  'ControlCriticalMonitorShuntPeakCharge') \t// boolean 0 = Off , 1 = On\n\t\t.int16le('ControlCriticalShuntPeakCharge',\t\t\t{ formatter: (x) => {return x/100;}}) // amps\n\t\t.int16le('ControlCriticalShuntCrateCharge',\t\t\t{ formatter: (x) => {return x/100;}}) // ratio\n\t\t.uint8(  'ControlCriticalMonitorShuntPeakDischg') \t// boolean 0 = Off , 1 = On\n\t\t.int16le('ControlCriticalShuntPeakDischg',\t\t\t{ formatter: (x) => {return x/100;}}) // amps\n\t\t.int16le('ControlCriticalShuntCrateDischg',\t\t\t{ formatter: (x) => {return x/100;}}) // ratio\n\t\t.uint32le('ControlCriticalStopInterval',\t\t\t{ formatter: (x) => {return x/1000;}}) // seconds\n\t\t.uint32le('ControlCriticalStartInterval',\t\t\t{ formatter: (x) => {return x/1000;}}) // seconds\n\t\t.uint32le('ControlCriticalTimeoutManualOverride',\t{ formatter: (x) => {return x/1000;}}) // seconds\n\t\t.uint32le('ControlCriticalPrechargeTimeInterval',\t{ formatter: (x) => {return x/1000;}}) // seconds\n\t\t.uint8(  'ControlCriticalIgnoreShuntOverdue') \t\t// boolean 0 = Off , 1 = On\n\t\t.uint8(  'ControlCriticalIgnoreRemoteOverdue') \t\t// boolean 0 = Off , 1 = On\n\t\t.int16le('ControlCriticalRecoverSupplyGapVolt',\t\t{ formatter: (x) => {return x/100;}})\n\t\t.int16le('ControlCriticalRecoverShuntChargeLimit',\t{ formatter: (x) => {return x/100;}}) // amps\n\t\t.int16le('ControlCriticalRecoverShuntDischgLimit',\t{ formatter: (x) => {return x/100;}}) // amps\n\t\t.uint8(  'ControlCriticalSetupVers') \n\n  \nmsg.payload = typea.parse(buf);\n\nswitch(msg.payload.ControlCriticalMode) {\n    case 0:\n        msg.payload.ControlCriticalMode = \"Auto\";\n        break;\n    case 1:\n        msg.payload.ControlCriticalMode = \"Manually On\";\n        break;\n    case 2:\n        msg.payload.ControlCriticalMode = \"Manually Off\";\n        break;\n    default:\n        msg.payload.ControlCriticalMode = \"Buggered\";\n}\n\nreturn msg;","outputs":1,"noerr":0,"x":970,"y":1820,"wires":[["dc3efe68.8830a"]]},{"id":"dc3efe68.8830a","type":"debug","z":"703f4458.ff2d1c","name":"","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","x":1330,"y":1820,"wires":[]},{"id":"8cf0163a.2f11c8","type":"function","z":"703f4458.ff2d1c","name":"Msg_5033_ControlChargeSetup","func":"var Packet = global.get('binary_parser');\nvar buf = msg.payload;\n\nvar typea = new Packet()\n\t\t.skip(8)\n\t\t.uint8( 'ControlChargeMode')  /* Choices ControlChargeModes\n\t\t\t\tAuto\t\t  \t = 0,\n\t\t\t\tManually On      = 1,\n\t\t\t\tManually Off     = 2,\n\t\t\t\tManually Limited = 3, */\t\n\t\t.uint8(  'ControlChargeAllowLimPowerStage')  \t// boolean 0 = Off , 1 = On\n\t\t.uint8(  'ControlChargeAllowBypassLimPower') \t// boolean 0 = Off , 1 = On\n\t\t.uint8(  'ControlChargeAllowBypassComplete') \t// boolean 0 = Off , 1 = On\n\t\t.int16le('ControlChargeInitalBypassAmp',\t\t{ formatter: (x) => {return x/1000;}})\n\t\t.int16le('ControlChargeFinalBypassAmp',\t\t\t{ formatter: (x) => {return x/1000;}})\n\t\t.uint8(  'ControlChargeMonitorCellTempLo') \t\t// boolean 0 = Off , 1 = On\n\t\t.uint8(  'ControlChargeMonitorCellTempHi') \t\t// boolean 0 = Off , 1 = On\n\t\t.uint8(  'ControlChargeCellTempLo',\t\t\t\t{ formatter: (x) => {return x-40;}}) // temperature ºC\n\t\t.uint8(  'ControlChargeCellTempHi',\t\t\t\t{ formatter: (x) => {return x-40;}}) // temperature ºC\n\t\t.uint8(  'ControlChargeMonitorAmbientLo') \t\t// boolean 0 = Off , 1 = On\n\t\t.uint8(  'ControlChargeMonitorAmbientHi') \t\t// boolean 0 = Off , 1 = On\n\t\t.uint8(  'ControlChargeAmbientTempLo',\t\t\t{ formatter: (x) => {return x-40;}}) // temperature ºC\n\t\t.uint8(  'ControlChargeAmbientTempHi',\t\t\t{ formatter: (x) => {return x-40;}}) // temperature ºC\n\t\t.uint8(  'ControlChargeMonitorSupplyHi') \t\t// boolean 0 = Off , 1 = On\n\t\t.int16le('ControlChargeSupplyVoltHi',\t\t\t{ formatter: (x) => {return x/100;}})\n\t\t.int16le('ControlChargeSupplyVoltResume',\t\t{ formatter: (x) => {return x/100;}})\n\t\t.uint8(  'ControlChargeMonitorCellVoltHi') \t\t// boolean 0 = Off , 1 = On\n\t\t.int16le('ControlChargeCellVoltHi',\t\t\t\t{ formatter: (x) => {return x/1000;}})\n\t\t.int16le('ControlChargeCellVoltResume',\t\t\t{ formatter: (x) => {return x/1000;}})\n\t\t.int16le('ControlChargeCellVoltLimPower',\t\t{ formatter: (x) => {return x/1000;}})\n\t\t.uint8(  'ControlChargeMonitorShuntVoltHi') \t// boolean 0 = Off , 1 = On\n\t\t.int16le('ControlChargeShuntVoltHi',\t\t\t{ formatter: (x) => {return x/100;}})\n\t\t.int16le('ControlChargeShuntVoltResume',\t\t{ formatter: (x) => {return x/100;}})\n\t\t.int16le('ControlChargeShuntVoltLimPower',\t\t{ formatter: (x) => {return x/100;}})\n\t\t.uint8(  'ControlChargeMonitorShuntSocHi') \t\t// boolean 0 = Off , 1 = On\n\t\t.uint8(  'ControlChargeShuntSocHi', \t\t\t{ formatter: (x) => {return (x-5)/2;}}) // percent\n\t\t.uint8(  'ControlChargeShuntSocResume', \t\t{ formatter: (x) => {return (x-5)/2;}}) // percent\n\t\t.uint32le('ControlChargeStopInterval',\t\t\t{ formatter: (x) => {return x/1000;}}) // seconds\n\t\t.uint32le('ControlChargeStartInterval',\t\t\t{ formatter: (x) => {return x/1000;}}) // seconds\n\t\t.uint8(  'ControlChargeSetupVers')  \n\t\t.floatle('ControlChargeBypassSessionLo',\t\t{ formatter: (x) => {return x/1000;}})\t// Ah\n\t\t.uint8(  'ControlChargeAllowBypassSession') \t// boolean 0 = Off , 1 = On\n\t\t\n  \nmsg.payload = typea.parse(buf);\n\nswitch(msg.payload.ControlChargeMode) {\n    case 0:\n        msg.payload.ControlChargeMode = \"Auto\";\n        break;\n    case 1:\n        msg.payload.ControlChargeMode = \"Manually On\";\n        break;\n    case 2:\n        msg.payload.ControlChargeMode = \"Manually Off\";\n        break;\n    case 3:\n        msg.payload.ControlChargeMode = \"Manually Limited\";\n        break;\n    default:\n        msg.payload.ControlChargeMode = \"Buggered\";\n}\n\n\nreturn msg;","outputs":1,"noerr":0,"x":970,"y":1920,"wires":[["82e94408.6d9168"]]},{"id":"82e94408.6d9168","type":"debug","z":"703f4458.ff2d1c","name":"","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","x":1330,"y":1920,"wires":[]},{"id":"647512d4.ff515c","type":"function","z":"703f4458.ff2d1c","name":"Msg_5158_ControlDischargeSetup","func":"var Packet = global.get('binary_parser');\nvar buf = msg.payload;\n\nvar typea = new Packet()\n\t\t.skip(8)\n\t\t.uint8(   'ControlDischargeMode') /* Choices ControlDischgModes\n\t\t\t\tAuto\t\t  \t = 0,\n\t\t\t\tManually On      = 1,\n\t\t\t\tManually Off     = 2,\n\t\t\t\tManually Limited = 3, */\t\n\t\t.uint8(   'ControlDischargeAllowLimPowerStage')\t// boolean 0 = Off , 1 = On\n\t\t.uint8(   'ControlDischargeMonitorCellTempLo') \t// boolean 0 = Off , 1 = On\n\t\t.uint8(   'ControlDischargeMonitorCellTempHi') \t// boolean 0 = Off , 1 = On\n\t\t.uint8(   'ControlDischargeCellTempLo',\t\t\t{ formatter: (x) => {return x-40;}}) // temperature ºC\n\t\t.uint8(   'ControlDischargeCellTempHi',\t\t\t{ formatter: (x) => {return x-40;}}) // temperature ºC\n\t\t.uint8(   'ControlDischargeMonitorAmbientLo') \t// boolean 0 = Off , 1 = On\n\t\t.uint8(   'ControlDischargeMonitorAmbientHi') \t// boolean 0 = Off , 1 = On\n\t\t.uint8(   'ControlDischargeAmbientTempLo',\t\t{ formatter: (x) => {return x-40;}}) // temperature ºC\n\t\t.uint8(   'ControlDischargeAmbientTempHi',\t\t{ formatter: (x) => {return x-40;}}) // temperature ºC\n\t\t.uint8(   'ControlDischargeMonitorSupplyLo') \t// boolean 0 = Off , 1 = On\n\t\t.int16le( 'ControlDischargeSupplyVoltLo',\t\t{ formatter: (x) => {return x/100;}})\n\t\t.int16le( 'ControlDischargeSupplyVoltResume',\t{ formatter: (x) => {return x/100;}})\n\t\t.uint8(   'ControlDischargeMonitorCellVoltLo') \t// boolean 0 = Off , 1 = On\n\t\t.int16le( 'ControlDischargeCellVoltLo',\t\t\t{ formatter: (x) => {return x/1000;}})\n\t\t.int16le( 'ControlDischargeCellVoltResume',\t\t{ formatter: (x) => {return x/1000;}})\n\t\t.int16le( 'ControlDischargeCellVoltLimPower',\t{ formatter: (x) => {return x/1000;}})\n\t\t.uint8(   'ControlDischargeMonitorShuntVoltLo') // boolean 0 = Off , 1 = On\n\t\t.int16le( 'ControlDischargeShuntVoltLo',\t\t{ formatter: (x) => {return x/100;}})\n\t\t.int16le( 'ControlDischargeShuntVoltResume',\t{ formatter: (x) => {return x/100;}})\n\t\t.int16le( 'ControlDischargeShuntVoltLimPower',\t{ formatter: (x) => {return x/100;}})\n\t\t.uint8(   'ControlDischargeMonitorShuntSocLo') \t// boolean 0 = Off , 1 = On\n\t\t.uint8(   'ControlDischargeShuntSocLo', \t\t{ formatter: (x) => {return (x-5)/2;}}) // percent\n\t\t.uint8(   'ControlDischargeShuntSocResume', \t{ formatter: (x) => {return (x-5)/2;}}) // percent\n\t\t.uint32le('ControlDischargeStopInterval',\t\t{ formatter: (x) => {return x/1000;}}) // seconds\n\t\t.uint32le('ControlDischargeStartInterval',\t\t{ formatter: (x) => {return x/1000;}}) // seconds\n\t\t.uint8(   'ControlDischargeSetupVers')  \n\t\n  \nmsg.payload = typea.parse(buf);\n\nswitch(msg.payload.ControlDischargeMode) {\n    case 0:\n        msg.payload.ControlDischargeMode = \"Auto\";\n        break;\n    case 1:\n        msg.payload.ControlDischargeMode = \"Manually On\";\n        break;\n    case 2:\n        msg.payload.ControlDischargeMode = \"Manually Off\";\n        break;\n    case 3:\n        msg.payload.ControlDischargeMode = \"Manually Limited\";\n        break;\n    default:\n        msg.payload.ControlDischargeMode = \"Buggered\";\n}\n\n\nreturn msg;","outputs":1,"noerr":0,"x":980,"y":2020,"wires":[["378ed92e.726616"]]},{"id":"378ed92e.726616","type":"debug","z":"703f4458.ff2d1c","name":"","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","x":1330,"y":2020,"wires":[]},{"id":"7a381282.4c466c","type":"function","z":"703f4458.ff2d1c","name":"Msg_5258_ControlThermalSetup","func":"var Packet = global.get('binary_parser');\nvar buf = msg.payload;\n\nvar typea = new Packet()\n\t\t.skip(8)\n\t\t.uint8('ControlHeatMode')  /* Choices ThermalControlModes\n\t\t\t\tAuto\t\t  \t = 0,\n\t\t\t\tManually On      = 1,\n\t\t\t\tManually Off     = 2, */\t\n\t\t.uint8('ControlHeatMonitorLoCellTemp')  \t// Boolean 0 = Off , 1 = On\n\t\t.uint8('ControlHeatMonitorLoAmbient')  \t\t// Boolean 0 = Off , 1 = On\n\t\t.uint8('ControlHeatLoCellTemp', \t\t\t{ formatter: (x) => {return x-40;}}) // temperature ºC\n\t\t.uint8('ControlHeatLoAmbient',\t \t\t\t{ formatter: (x) => {return x-40;}}) // temperature ºC\n\t\t.uint32le('ControlHeatStopInterval',\t\t{ formatter: (x) => {return x/1000;}}) // seconds\n\t\t.uint32le('ControlHeatStartInterval',\t\t{ formatter: (x) => {return x/1000;}}) // seconds\n\t\t.uint8('ControlCoolMode')  \t\t\t\t\t/* Choices ThermalControlModes */\n\t\t.uint8('ControlCoolMonitorHiCellTemp')  \t// Boolean 0 = Off , 1 = On\n\t\t.uint8('ControlCoolMonitorHiAmbient')   \t// Boolean 0 = Off , 1 = On\n\t\t.uint8('ControlCoolMonitorInBypass')   \t\t// Boolean 0 = Off , 1 = On\n\t\t.uint8('ControlCoolHiCellTemp', \t\t\t{ formatter: (x) => {return x-40;}}) // temperature ºC\n\t\t.uint8('ControlCoolHiAmbient',\t \t\t\t{ formatter: (x) => {return x-40;}}) // temperature ºC\n\t\t.uint32le('ControlCoolStopInterval',\t\t{ formatter: (x) => {return x/1000;}}) // seconds\n\t\t.uint32le('ControlCoolStartInterval',\t\t{ formatter: (x) => {return x/1000;}}) // seconds\n\t\t.uint8('ControlThermalSetupVers')  \n\n  \nmsg.payload = typea.parse(buf);\n\nswitch(msg.payload.ControlHeatMode) {\n    case 0:\n        msg.payload.ControlHeatMode = \"Auto\";\n        break;\n    case 1:\n        msg.payload.ControlHeatMode = \"Manually On\";\n        break;\n    case 2:\n        msg.payload.ControlHeatMode = \"Manually Off\";\n        break;\n    default:\n        msg.payload.ControlHeatMode = \"Buggered\";\n}\n\n\nreturn msg;","outputs":1,"noerr":0,"x":980,"y":2120,"wires":[["aaff2c43.16e15"]]},{"id":"aaff2c43.16e15","type":"debug","z":"703f4458.ff2d1c","name":"","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","x":1330,"y":2120,"wires":[]},{"id":"f05f8e2e.5dd4a","type":"function","z":"703f4458.ff2d1c","name":"Msg_4e58_ControlRemoteSetup","func":"var Packet = global.get('binary_parser');\nvar buf = msg.payload;\n\nvar typea = new Packet()\n\t\t.skip(8)\n\t\t.int16le('ControlChargeTargetNormVolt')\n\t\t.int16le('ControlChargeTargetNormAmp')\n\t\t.int16le('ControlChargeTargetNormVA')\n\t\t.int16le('ControlChargeTargetLimpVolt')\n\t\t.int16le('ControlChargeTargetLimpAmp')\n\t\t.int16le('ControlChargeTargetLimpVA')\n\t\t.int16le('ControlChargeScale16volt')\n\t\t.int16le('ControlChargeScale16amp')\n\t\t.int16le('ControlChargeScale16va')\n\t\t.int16le('ControlDischargeTargetNormVolt')\n\t\t.int16le('ControlDischargeTargetNormAmp')\n\t\t.int16le('ControlDischargeTargetNormVA')\n\t\t.int16le('ControlDischargeTargetLimpVolt')\n\t\t.int16le('ControlDischargeTargetLimpAmp')\n\t\t.int16le('ControlDischargeTargetLimpVA')\n\t\t.int16le('ControlDischargeScale16volt')\n\t\t.int16le('ControlDischargeScale16amp')\n\t\t.int16le('ControlDischargeScale16va')\n\t\t.uint8('ControlRemoteSetupVers')  \n\t\t\nmsg.payload = typea.parse(buf);\nreturn msg;","outputs":1,"noerr":0,"x":980,"y":2220,"wires":[["606b0017.76036"]]},{"id":"606b0017.76036","type":"debug","z":"703f4458.ff2d1c","name":"","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","x":1330,"y":2220,"wires":[]},{"id":"96dc58a4.2a69c8","type":"function","z":"703f4458.ff2d1c","name":"Msg_5831_DailySessionHist","func":"var Packet = global.get('binary_parser');\nvar buf = msg.payload;\n\nvar typea = new Packet()\n\t\t.skip(8)\n\t\t.int16le('DailySessionHistId')\n\t\t.uint32le('DailySessionHistTime') \t\t// Epoch   *** log key ***\n\t\t.uint8('DailySessionHistCriticalEvents')\n\t\t.skip(1)\n\t\t.uint8('DailySessionHistMinReportTemp',\t\t\t{ formatter: (x) => {return x-40;}})\t// temperature ºC\n\t\t.uint8('DailySessionHistMaxReportTemp',\t\t\t{ formatter: (x) => {return x-40;}})\t// temperature ºC\n\t\t.uint8('DailySessionHistMinShuntSoc', \t\t\t{ formatter: (x) => {return (x-5)/2;}}) // percent\n\t\t.uint8('DailySessionHistMaxShuntSoc', \t\t\t{ formatter: (x) => {return (x-5)/2;}}) // percent\n\t\t.int16le('DailySessionHistMinCellVolt',\t\t\t{ formatter: (x) => {return x/1000;}})\n\t\t.int16le('DailySessionHistMaxCellVolt',\t\t\t{ formatter: (x) => {return x/1000;}})\n\t\t.int16le('DailySessionHistMinSupplyVolt',\t\t{ formatter: (x) => {return x/100;}})\n\t\t.int16le('DailySessionHistMaxSupplyVolt',\t\t{ formatter: (x) => {return x/100;}})\n\t\t.int16le('DailySessionHistMinShuntVolt',\t\t{ formatter: (x) => {return x/100;}})\n\t\t.int16le('DailySessionHistMaxShuntVolt',\t\t{ formatter: (x) => {return x/100;}})\n\t\t.uint8('DailySessionHistThermalBandA',\t\t\t{ formatter: (x) => {return x/10;}}) // hours\n\t\t.uint8('DailySessionHistThermalBandB',\t\t\t{ formatter: (x) => {return x/10;}}) // hours\n\t\t.uint8('DailySessionHistThermalBandC',\t\t\t{ formatter: (x) => {return x/10;}}) // hours\n\t\t.uint8('DailySessionHistThermalBandD',\t\t\t{ formatter: (x) => {return x/10;}}) // hours\n\t\t.uint8('DailySessionHistThermalBandE',\t\t\t{ formatter: (x) => {return x/10;}}) // hours\n\t\t.uint8('DailySessionHistThermalBandF',\t\t\t{ formatter: (x) => {return x/10;}}) // hours\n\t\t.uint8('DailySessionHistThermalBandG',\t\t\t{ formatter: (x) => {return x/10;}}) // hours\n\t\t.uint8('DailySessionHistThermalBandH',\t\t\t{ formatter: (x) => {return x/10;}}) // hours\n\t\t.uint8('DailySessionHistSocBandA',\t\t\t\t{ formatter: (x) => {return x/10;}}) // hours\n\t\t.uint8('DailySessionHistSocBandB',\t\t\t\t{ formatter: (x) => {return x/10;}}) // hours\n\t\t.uint8('DailySessionHistSocBandC',\t\t\t\t{ formatter: (x) => {return x/10;}}) // hours\n\t\t.uint8('DailySessionHistSocBandD',\t\t\t\t{ formatter: (x) => {return x/10;}}) // hours\n\t\t.uint8('DailySessionHistSocBandE',\t\t\t\t{ formatter: (x) => {return x/10;}}) // hours\n\t\t.uint8('DailySessionHistSocBandF',\t\t\t\t{ formatter: (x) => {return x/10;}}) // hours\n\t\t.uint8('DailySessionHistSocBandG',\t\t\t\t{ formatter: (x) => {return x/10;}}) // hours\n\t\t.uint8('DailySessionHistSocBandH',\t\t\t\t{ formatter: (x) => {return x/10;}}) // hours\n\t\t.int16le('DailySessionHistShuntPeakCharge',\t\t{ formatter: (x) => {return x/100;}})  // amp\n\t\t.int16le('DailySessionHistShuntPeakDischg',\t\t{ formatter: (x) => {return x/100;}})  // amp\n\t\t.int16le('DailySessionHistCumulShuntAhCharge',\t{ formatter: (x) => {return x/1000;}}) // Ah\n\t\t.int16le('DailySessionHistCumulShuntAhDischg',\t{ formatter: (x) => {return x/1000;}}) // Ah\n\t\t\nmsg.payload = typea.parse(buf);\n\n// convert date(s)\nmsg.payload.DailySessionHistTime = new Date(msg.payload.DailySessionHistTime*1000);\n\nreturn msg;","outputs":1,"noerr":0,"x":960,"y":2320,"wires":[["4210f3d7.2a051c"]]},{"id":"4210f3d7.2a051c","type":"debug","z":"703f4458.ff2d1c","name":"","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","x":1330,"y":2320,"wires":[]},{"id":"834b7c49.c4571","type":"function","z":"703f4458.ff2d1c","name":"Msg_6831_QuickSessionHist","func":"var Packet = global.get('binary_parser');\nvar buf = msg.payload;\n\nvar typea = new Packet()\n\t\t.skip(8)\n\t\t.int16le('QuickSessionHistId')\n\t\t.uint32le('QuickSessionHistTime') \t\t// Epoch  *** log key ***\n\t\t.uint8('QuickSessionHistSystemOpState') /* Choices\n\t\t\t\tSimulator = 0,   \t  // LED = rainbow pulse\n\t\t\t\tIdle = 1,        \t  // LED = green slow pulse\n\t\t\t\tDischarging = 2, \t  // LED = green solid \n\t\t\t\tSoC Empty = 3,   \t  // LED = green double blink\n\t\t\t\tCharging = 4,    \t  // LED = blue slow pulse\n\t\t\t\tFull = 5,        \t  // LED = blue double blink\n\t\t\t\tTimeout = 6,     \t  // LED = red solid\n\t\t\t\tCritical Pending = 7, // LED = red fast pulse\n\t\t\t\tCritical Offline = 8, // LED = red slow pulse\n\t\t\t\tMqtt Offline = 9,     // LED = white blink\n\t\t\t\tAuth Setup = 10,      // LED = white solid\n\t\t\t\tShunt Timeout = 11,   // LED = red solid  \t*/\n\t\t.uint8( 'QuickSessionHistControlLogic')  \n\t\t.int16le('QuickSessionHistMinCellVolt',\t\t\t{ formatter: (x) => {return x/1000;}})\n\t\t.int16le('QuickSessionHistMaxCellVolt',\t\t\t{ formatter: (x) => {return x/1000;}})\n\t\t.int16le('QuickSessionHistAvgCellVolt',\t\t\t{ formatter: (x) => {return x/1000;}})\n\t\t.uint8(  'QuickSessionHistAvgCellTemp',\t\t\t{ formatter: (x) => {return x-40;}})\t// temperature ºC\n\t\t.int16le('QuickSessionHistSocHiRes',\t\t\t{ formatter: (x) => {return x/100;}})\t// percent\n\t\t.int16le('QuickSessionHistShuntVolt',\t\t\t{ formatter: (x) => {return x/100;}})\n\t\t.floatle('QuickSessionHistShuntAmp',\t\t\t{ formatter: (x) => {return x/1000;}})  // amp\n\t\t.uint8(  'QuickSessionHistNumOfCellsInBypass')\n\n\t\nmsg.payload = typea.parse(buf);\n\n// convert date(s)\nmsg.payload.QuickSessionHistTime = new Date(msg.payload.QuickSessionHistTime*1000);\n\nswitch(msg.payload.QuickSessionHistSystemOpState) {\n    case 0:\n        msg.payload.QuickSessionHistSystemOpState = \"Simulator\";\n        break;\n    case 1:\n        msg.payload.QuickSessionHistSystemOpState = \"Idle\";\n        break;\n    case 2:\n        msg.payload.QuickSessionHistSystemOpState = \"Discharging\";\n        break;\n    case 3:\n        msg.payload.QuickSessionHistSystemOpState = \"SoC Empty\";\n        break;\n    case 4:\n        msg.payload.QuickSessionHistSystemOpState = \"Charging\";\n        break;\n    case 5:\n        msg.payload.QuickSessionHistSystemOpState = \"Full\";\n        break;\n    case 6:\n        msg.payload.QuickSessionHistSystemOpState = \"Timeout\";\n        break;\n    case 7:\n        msg.payload.QuickSessionHistSystemOpState = \"CriticalPending\";\n        break;\n    case 8:\n        msg.payload.QuickSessionHistSystemOpState = \"CriticalOffline\";\n        break;\n    case 9:\n        msg.payload.QuickSessionHistSystemOpState = \"MqttOffline\";\n        break;\n    case 10:\n        msg.payload.QuickSessionHistSystemOpState = \"AuthSetup\";\n        break;\n    case 11:\n        msg.payload.QuickSessionHistSystemOpState = \"Shunt Timeout\";\n        break;\n    default:\n        msg.payload.QuickSessionHistSystemOpState = \"Buggered\";\n}\n\n\nreturn msg;","outputs":1,"noerr":0,"x":960,"y":2420,"wires":[["a16b9d82.b0c72"]]},{"id":"e8363d9f.a19bc","type":"function","z":"703f4458.ff2d1c","name":"Msg_5431_SessionMetrics","func":"var Packet = global.get('binary_parser');\nvar buf = msg.payload;\n\nvar typea = new Packet()\n\t\t.skip(8)\n\t\t.uint32le('QuickSessRecentTime') \t\t// EPOCH\n\t\t.int16le('QuickSessNumOfRecords')\n\t\t.int16le('QuickSessMaxNumOfRecords')\n\t\t.uint32le('QuickSessionInterval',\t\t{ formatter: (x) => {return x/1000;}})\n\t\t.uint8('AllowQuickSession')  \t\t\t// boolean 0 = Off , 1 = On\n\t\t.int16le('DailySessNumOfRecords')\n\t\t.int16le('DailySessMaxNumOfRecords')\n\n\nmsg.payload = typea.parse(buf);\n\n// convert date(s)\nmsg.payload.QuickSessRecentTime = new Date(msg.payload.QuickSessRecentTime*1000);\n\nreturn msg;","outputs":1,"noerr":0,"x":960,"y":2520,"wires":[["ac674dac.128c5"]]},{"id":"cb97ce1c.59851","type":"debug","z":"703f4458.ff2d1c","name":"","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","x":510,"y":220,"wires":[]},{"id":"f142681f.d12898","type":"function","z":"703f4458.ff2d1c","name":"Get the set of saved global variables","func":"\nvar ONE = global.get('ONE') || 0;\nvar TWO = global.get('TWO') || 0;\nvar THREE = global.get('THREE') || 0;\nvar FOUR = global.get('FOUR') || 0;\nvar FIVE = global.get('FIVE') || 0;\nvar SIX = global.get('SIX') || 0;\nvar SEVEN = global.get('SEVEN') || 0;\nvar EIGHT = global.get('EIGHT') || 0;\nvar NINE = global.get('NINE') || 0;\nvar TEN = global.get('TEN') || 0;\nvar ELEVEN = global.get('ELEVEN') || 0;\nvar TWELVE = global.get('TWELVE') || 0;\nvar THIRTEEN = global.get('THIRTEEN') || 0;\nvar FOURTEEN = global.get('FOURTEEN') || 0;\n\n\n\nvar m = {};\nm.labels = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14'];\nm.data = [[ONE, TWO, THREE, FOUR, FIVE, SIX, SEVEN,EIGHT, NINE, TEN, ELEVEN, TWELVE, THIRTEEN, FOURTEEN]];\nm.series = ['Cells'];\nreturn {payload:[m],topic:msg.topic};","outputs":1,"noerr":0,"x":1210,"y":120,"wires":[["708888cb.eedbe8","3427fff8.7c399"]]},{"id":"708888cb.eedbe8","type":"debug","z":"703f4458.ff2d1c","name":"","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","x":1470,"y":80,"wires":[]},{"id":"cd7689e1.49ef98","type":"function","z":"703f4458.ff2d1c","name":"Put cell voltage into globals","func":"var myLongmon;\n\nswitch(msg.payload.ID) {\n    case 1:\n        myLongmon=\"ONE\";\n        break;\n    case 2:\n        myLongmon=\"TWO\";\n        break;\n    case 3:\n        myLongmon=\"THREE\";\n        break;\n    case 4:\n        myLongmon=\"FOUR\";\n        break;\n    case 5:\n        myLongmon=\"FIVE\";\n        break;\n    case 6:\n        myLongmon=\"SIX\";\n        break;\n    case 7:\n        myLongmon=\"SEVEN\";\n        break;\n    case 8:\n        myLongmon=\"EIGHT\";\n        break;\n    case 9:\n        myLongmon=\"NINE\";\n        break;\n    case 10:\n        myLongmon=\"TEN\";\n        break;\n    case 11:\n        myLongmon=\"ELEVEN\";\n        break;\n    case 12:\n        myLongmon=\"TWELVE\";\n        break;\n    case 13:\n        myLongmon=\"THIRTEEN\";\n        break;\n    case 14:\n        myLongmon=\"FOURTEEN\";\n        break;\n}\n \nglobal.set(myLongmon,msg.payload.MaxCellVolt);    \n     \n//return msg;","outputs":1,"noerr":0,"x":1800,"y":320,"wires":[[]]},{"id":"d1859084.b14a1","type":"inject","z":"703f4458.ff2d1c","name":"Update the chart every 1 second","topic":"","payload":"","payloadType":"date","repeat":"1","crontab":"","once":false,"onceDelay":0.1,"x":900,"y":120,"wires":[["f142681f.d12898"]]},{"id":"3427fff8.7c399","type":"ui_chart","z":"703f4458.ff2d1c","name":"Realtime cell voltages","group":"ef73892e.465d28","order":5,"width":"0","height":"0","label":"Cell voltages","chartType":"bar","legend":"false","xformat":"HH:mm:ss","interpolate":"linear","nodata":"No Data","dot":false,"ymin":"3.5","ymax":"4.2","removeOlder":1,"removeOlderPoints":"","removeOlderUnit":"3600","cutout":0,"useOneColor":true,"colors":["#ff8000","#aec7e8","#ff7f0e","#2ca02c","#98df8a","#d62728","#ff9896","#9467bd","#c5b0d5"],"useOldStyle":false,"x":1500,"y":120,"wires":[[],[]]},{"id":"9491e91.23d8a18","type":"function","z":"703f4458.ff2d1c","name":"DailySessionCumulShuntkWhDischg","func":"var myNumber = 0;\nmyNumber = Number(msg.payload.DailySessionCumulShuntkWhDischg);\nreturn { payload : myNumber.toFixed(2) };","outputs":1,"noerr":0,"x":1830,"y":1000,"wires":[["fd7c071f.6e6c28"]]},{"id":"7b80d4ee.147e3c","type":"function","z":"703f4458.ff2d1c","name":"DailySessionCumulShuntkWhCharge","func":"var myNumber = 0;\nmyNumber = Number(msg.payload.DailySessionCumulShuntkWhCharge);\nreturn { payload : myNumber.toFixed(2) };","outputs":1,"noerr":0,"x":1830,"y":1040,"wires":[["187285fe.3d1ada"]]},{"id":"fd7c071f.6e6c28","type":"debug","z":"703f4458.ff2d1c","name":"","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","x":2310,"y":1000,"wires":[]},{"id":"187285fe.3d1ada","type":"debug","z":"703f4458.ff2d1c","name":"","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","x":2310,"y":1040,"wires":[]},{"id":"fb47ae92.67c41","type":"function","z":"703f4458.ff2d1c","name":"ShuntVoltage","func":"var myNumber = 0;\nmyNumber = Number(msg.payload.ShuntVoltage);\nreturn { payload : myNumber.toFixed(2) };","outputs":1,"noerr":0,"x":1750,"y":360,"wires":[["c217ee70.d397c","c925f9d8.b7d048"]]},{"id":"c217ee70.d397c","type":"debug","z":"703f4458.ff2d1c","name":"","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","x":2310,"y":360,"wires":[]},{"id":"b6a22f86.df8a3","type":"function","z":"703f4458.ff2d1c","name":"ShuntCurrent","func":"var myNumber = 0;\nmyNumber = Number(msg.payload.ShuntCurrent);\nreturn { payload : myNumber.toFixed(2) };","outputs":1,"noerr":0,"x":1750,"y":400,"wires":[["5ff326bd.ffd618","4aec7788.7cecc8"]]},{"id":"5ff326bd.ffd618","type":"debug","z":"703f4458.ff2d1c","name":"","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","x":2310,"y":400,"wires":[]},{"id":"75218ed.d586e7","type":"debug","z":"703f4458.ff2d1c","name":"","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","x":2310,"y":440,"wires":[]},{"id":"6bf9066b.2d44b8","type":"function","z":"703f4458.ff2d1c","name":"ShuntWatts","func":"var myCurrent = 0;\nvar myVoltage = 0;\nvar myWatts = 0;\n\nmyCurrent = Number(msg.payload.ShuntCurrent);\nmyVoltage = Number(msg.payload.ShuntVoltage);\n\nmyWatts=myVoltage*myCurrent;\n\nreturn { payload : myWatts.toFixed(2) };","outputs":1,"noerr":0,"x":1750,"y":440,"wires":[["75218ed.d586e7","25c9c54c.da4bba"]]},{"id":"6737b8da.fa5b58","type":"ui_text","z":"703f4458.ff2d1c","group":"ef73892e.465d28","order":1,"width":"0","height":"0","name":"Shunt Status: ","label":"Shunt Status: ","format":"{{msg.payload.ShuntStatus}}","layout":"row-left","x":2100,"y":500,"wires":[]},{"id":"4aec7788.7cecc8","type":"ui_text","z":"703f4458.ff2d1c","group":"ef73892e.465d28","order":3,"width":"0","height":"0","name":"Shunt Amps: ","label":"Shunt Amps: ","format":"{{msg.payload}}A","layout":"row-left","x":2090,"y":400,"wires":[]},{"id":"c925f9d8.b7d048","type":"ui_text","z":"703f4458.ff2d1c","group":"ef73892e.465d28","order":2,"width":"0","height":"0","name":"Shunt Volts: ","label":"Shunt Volts: ","format":"{{msg.payload}}v","layout":"row-left","x":2090,"y":360,"wires":[]},{"id":"25c9c54c.da4bba","type":"ui_text","z":"703f4458.ff2d1c","group":"ef73892e.465d28","order":4,"width":"0","height":"0","name":"Shunt Watts: ","label":"Shunt Watts: ","format":"{{msg.payload}}W","layout":"row-left","x":2090,"y":440,"wires":[]},{"id":"e765d69d.7677a8","type":"function","z":"703f4458.ff2d1c","name":"Msg_4732_HwSystemSetup","func":"var Packet = global.get('binary_parser');\nvar buf = msg.payload;\n\nvar typea = new Packet()\n   .skip(8)\n      .uint8('isCriticalBattOkState')                 // Boolean 0 = Off , 1 = On\n      .uint8('isCriticalBattOkCalc')                          // Boolean 0 = Off , 1 = On\n      .uint8('isCriticalTransition')                          // Boolean 0 = Off , 1 = On\n      .uint8('hasCriticalCellOverdue')                // Boolean 0 = Off , 1 = On\n      .uint8('hasCriticalCellVoltLo')                 // Boolean 0 = Off , 1 = On\n      .uint8('hasCriticalCellVoltHi')                 // Boolean 0 = Off , 1 = On\n      .uint8('hasCriticalCellTempLo')                 // Boolean 0 = Off , 1 = On\n      .uint8('hasCriticalCellTempHi')                 // Boolean 0 = Off , 1 = On\n      .uint8('hasCriticalSupplyVoltLo')               // Boolean 0 = Off , 1 = On\n      .uint8('hasCriticalSupplyVoltHi')               // Boolean 0 = Off , 1 = On\n      .uint8('hasCriticalAmbientLo')                          // Boolean 0 = Off , 1 = On\n      .uint8('hasCriticalAmbientHi')                          // Boolean 0 = Off , 1 = On\n      .uint8('hasCriticalShuntVoltLo')                // Boolean 0 = Off , 1 = On\n      .uint8('hasCriticalShuntVoltHi')                // Boolean 0 = Off , 1 = On\n      .uint8('hasCriticalShuntVoltLoIdle')    // Boolean 0 = Off , 1 = On\n      .uint8('hasCriticalShuntPeakCharge')    // Boolean 0 = Off , 1 = On\n      .uint8('hasCriticalShuntPeakDischg')    // Boolean 0 = Off , 1 = On\n      .uint8('isChargeOnState')                               // Boolean 0 = Off , 1 = On\n      .uint8('isChargeLimPower')                              // Boolean 0 = Off , 1 = On\n      .uint8('isChargeTransition')                    // Boolean 0 = Off , 1 = On\n      .uint8('isChargePowerRateState') /* Choices ChargeRateStates\n                                Off                     = 0,\n                                Limited Power   = 2,\n                                Normal Power    = 4, */\n      .uint8('isChargePowerRateCalc')                 /* Choices ChargeRateStates */\n      .uint8('hasChargeCellVoltHi ')                          // Boolean 0 = Off , 1 = On\n      .uint8('hasChargeCellVoltPause ')               // Boolean 0 = Off , 1 = On\n      .uint8('hasChargeCellVoltLimPower ')    // Boolean 0 = Off , 1 = On\n      .uint8('hasChargeCellTempLo ')                          // Boolean 0 = Off , 1 = On\n      .uint8('hasChargeCellTempHi ')                          // Boolean 0 = Off , 1 = On\n      .uint8('hasChargeAmbientTempLo ')               // Boolean 0 = Off , 1 = On\n      .uint8('hasChargeAmbientTempHi ')               // Boolean 0 = Off , 1 = On\n      .uint8('hasChargeSupplyVoltHi ')                // Boolean 0 = Off , 1 = On\n      .uint8('hasChargeSupplyVoltPause ')     // Boolean 0 = Off , 1 = On\n      .uint8('hasChargeShuntVoltHi ')                 // Boolean 0 = Off , 1 = On\n      .uint8('hasChargeShuntVoltPause ')              // Boolean 0 = Off , 1 = On\n      .uint8('hasChargeShuntVoltLimPower ')   // Boolean 0 = Off , 1 = On\n      .uint8('hasChargeShuntSocHi ')                          // Boolean 0 = Off , 1 = On\n      .uint8('hasChargeShuntSocPause ')               // Boolean 0 = Off , 1 = On\n      .uint8('hasChargeAboveInitalBypass ')   // Boolean 0 = Off , 1 = On\n      .uint8('hasChargeAboveFinalBypass ')            // Boolean 0 = Off , 1 = On\n      .uint8('hasChargeInBypass ')                    // Boolean 0 = Off , 1 = On\n      .uint8('hasChargeBypassComplete ')              // Boolean 0 = Off , 1 = On\n      .uint8('hasChargeBypassTempRelief ')    // Boolean 0 = Off , 1 = On\n      .uint8('isDischgOnState ')                              // Boolean 0 = Off , 1 = On\n      .uint8('isDischgLimPower ')                     // Boolean 0 = Off , 1 = On\n      .uint8('isDischgTransition ')                   // Boolean 0 = Off , 1 = On\n      .uint8('isDischgPowerRateState ') /* Choices DischgRateStates\n                                Off                     = 0,\n                                Limited Power   = 2,\n                                Normal Power    = 4, */\n      .uint8('isDischgPowerRateCalc ')                /* Choices DischgRateStates */\n      .uint8('hasDischgCellVoltLo ')                          // Boolean 0 = Off , 1 = On\n      .uint8('hasDischgCellVoltPause ')               // Boolean 0 = Off , 1 = On\n      .uint8('hasDischgCellVoltLimPower ')    // Boolean 0 = Off , 1 = On\n      .uint8('hasDischgCellTempLo ')                          // Boolean 0 = Off , 1 = On\n      .uint8('hasDischgCellTempHi ')                          // Boolean 0 = Off , 1 = On\n      .uint8('hasDischgAmbientLo ')                   // Boolean 0 = Off , 1 = On\n      .uint8('hasDischgAmbientHi ')                   // Boolean 0 = Off , 1 = On\n      .uint8('hasDischgSupplyVoltLo ')                // Boolean 0 = Off , 1 = On\n      .uint8('hasDischgSupplyVoltPause ')     // Boolean 0 = Off , 1 = On\n      .uint8('hasDischgShuntVoltLo ')                 // Boolean 0 = Off , 1 = On\n      .uint8('hasDischgShuntVoltPause ')              // Boolean 0 = Off , 1 = On\n      .uint8('hasDischgShuntVoltLimPower ')   // Boolean 0 = Off , 1 = On\n      .uint8('hasDischgShuntSocLo ')                          // Boolean 0 = Off , 1 = On\n      .uint8('hasDischgShuntSocPause ')               // Boolean 0 = Off , 1 = On\n      .uint8('isHeatOnState ')                                // Boolean 0 = Off , 1 = On\n      .uint8('isHeatOnCalc ')                                 // Boolean 0 = Off , 1 = On\n      .uint8('isHeatTransition ')                     // Boolean 0 = Off , 1 = On\n      .uint8('hasHeatAmbientLo ')                     // Boolean 0 = Off , 1 = On\n      .uint8('hasHeatCellTempLo ')                    // Boolean 0 = Off , 1 = On\n      .uint8('isCoolOnState')                                 // Boolean 0 = Off , 1 = On\n      .uint8('isCoolOnCalc')                                          // Boolean 0 = Off , 1 = On\n      .uint8('isCoolTransition')                              // Boolean 0 = Off , 1 = On\n      .uint8('hasCoolAmbientHi ')                     // Boolean 0 = Off , 1 = On\n      .uint8('hasCoolCellTempHi ')                    // Boolean 0 = Off , 1 = On\n      .uint8('hasChargeBypassSessionLo ')    // Boolean 0 = Off , 1 = On\n\nmsg.payload = typea.parse(buf);\n\nswitch(msg.payload.isChargePowerRateState) {\n    case 0:\n        msg.payload.isChargePowerRateState = \"Off\";\n        break;\n    case 2:\n        msg.payload.isChargePowerRateState = \"Limited Power\";\n        break;\n    case 4:\n        msg.payload.isChargePowerRateState = \"Normal Power\";\n        break;\n    default:\n        msg.payload.isChargePowerRateState = \"Buggered\";\n}\n\nswitch(msg.payload.isDischgPowerRateState) {\n    case 0:\n        msg.payload.isDischgPowerRateState = \"Off\";\n        break;\n    case 2:\n        msg.payload.isDischgPowerRateState = \"Limited Power\";\n        break;\n    case 4:\n        msg.payload.isDischgPowerRateState = \"Normal Power\";\n        break;\n    default:\n        msg.payload.isDischgPowerRateState = \"Buggered\";\n}\n\n\n\nreturn msg;","outputs":1,"noerr":0,"x":960,"y":2620,"wires":[["d85e5f61.27ac9"]]},{"id":"d85e5f61.27ac9","type":"debug","z":"703f4458.ff2d1c","name":"","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","x":1330,"y":2620,"wires":[]},{"id":"806fb617.a32ad8","type":"function","z":"703f4458.ff2d1c","name":"Msg_4d34_HwExpansionSetup","func":"var Packet = global.get('binary_parser');\nvar buf = msg.payload;\n\nvar typea = new Packet()\n\t\t.skip(8)\n\t\t.uint8('HwExpansionSetupVers')  \n\t\t.uint8('HwExpansionTemplate')  /* ExtensionTemplateOptions\n\t\t\t\tNone = 0,\n\t\t\t\tExpansionBoard 12v = 1,\n\t\t\t\tExpansionBoard 48v = 2,\n\t\t\t\tWatchMonCmC v2.0   = 3,\t*/\t\n\t\t.uint8('HwExpansionNeoPixelMode')  /* NeoPixelExtStatusModes\n\t\t\t\tNone \t\t\t\t= 0,\n\t\t\t\tRepeat \t\t\t\t= 1,\n\t\t\t\tStatus + 7seg SoC% \t= 2,\n\t\t\t\tSolid SoC% 8seg \t= 3,\t*/\n\t\t.uint8('HwExpansionRelay1')  /* ExpansionOutputAssignments\n\t\t\t\tNone = 0,\n\t\t\t\tManualOn = 1,\n\t\t\t\tCritical BattOk = 2,\n\t\t\t\tCharging On = 4,\n\t\t\t\tDischarging On = 5,\n\t\t\t\tHeating Required = 6,\n\t\t\t\tCooling Required = 7,\n\t\t\t\tRun / Idle input = 8,\n\t\t\t\tCharge / Normal input = 9,\n\t\t\t\tBypass Complete = 10,\n\t\t\t\tCharging Limited = 11,\n\t\t\t\tDischarging Limited = 12,\n\t\t\t\tCritical Recovery = 13,\n\t\t\t\tCritical PulseOn = 14,\n\t\t\t\tCritical PulseOff = 15,\n\t\t\t\tCritical Fault = 16,\n\t\t\t\tCritical PrechargeTimer = 17, */\n\t\t.uint8('HwExpansionRelay2')  \t/* ExpansionOutputAssignments */\n\t\t.uint8('HwExpansionRelay3')  \t/* ExpansionOutputAssignments */\n\t\t.uint8('HwExpansionRelay4')\t\t/* ExpansionOutputAssignments */\n\t\t.uint8('HwExpansionOutput5')  \t/* ExpansionOutputAssignments */\n\t\t.uint8('HwExpansionOutput5')  \t/* ExpansionOutputAssignments */\n\t\t.uint8('HwExpansionOutput7')  \t/* ExpansionOutputAssignments */\n\t\t.uint8('HwExpansionOutput8')  \t/* ExpansionOutputAssignments */\n\t\t.uint8('HwExpansionOutput9')  \t/* ExpansionOutputAssignments */\n\t\t.uint8('HwExpansionOutput10') \t/* ExpansionOutputAssignments */\n\t\t.uint8('HwExpansionInput1')  \t/* ExtensionInputOptions\n\t\t\t\tNone \t\t\t\t\t= 0,\n\t\t\t\tRun / Idle mode \t\t= 1,\n\t\t\t\tCharge / Normal mode \t= 2,\n\t\t\t\tCritical contact sensor - On = 3,\n\t\t\t\tCritical contact sensor - Fault = 4, */\n\t\t.uint8('HwExpansionInput2')  \t/* ExtensionInputOptions */\n\t\t.uint8('HwExpansionInput3')  \t/* ExtensionInputOptions */\n\t\t.uint8('HwExpansionInput4')  \t/* ExtensionInputOptions */\n\t\t.uint8('HwExpansionInput5')  \t/* ExtensionInputOptions */\n\t\t.uint8('HwExpansionInputAIN1') \n\t\t.uint8('HwExpansionInputAIN2') \n\t\t.int16le('HwExpansionCustomFeature1')\n\t\t.int16le('HwExpansionCustomFeature2')\nmsg.payload = typea.parse(buf);\n\nswitch(msg.payload.HwExpansionTemplate) {\n    case 0:\n        msg.payload.HwExpansionTemplate = \"None\";\n        break;\n    case 1:\n        msg.payload.HwExpansionTemplate = \"ExpansionBoard 12v\";\n        break;\n    case 2:\n        msg.payload.HwExpansionTemplate = \"ExpansionBoard 48v\";\n        break;\n    case 3:\n        msg.payload.HwExpansionTemplate = \"WatchMonCmC v2.0\";\n        break;\n    default:\n        msg.payload.HwExpansionTemplate = \"Buggered\";\n}\n\nswitch(msg.payload.HwExpansionNeoPixelMode) {\n    case 0:\n        msg.payload.HwExpansionNeoPixelMode = \"None\";\n        break;\n    case 1:\n        msg.payload.HwExpansionNeoPixelMode = \"Repeat\";\n        break;\n    case 2:\n        msg.payload.HwExpansionNeoPixelMode = \"Status + 7seg SoC%\";\n        break;\n    case 3:\n        msg.payload.HwExpansionNeoPixelMode = \"Solid SoC% 8seg\";\n        break;\n    default:\n        msg.payload.HwExpansionNeoPixelMode = \"Buggered\";\n}\n\nswitch(msg.payload.HwExpansionRelay1) {\n    case 0:\n        msg.payload.HwExpansionRelay1 = \"None\";\n        break;\n    case 1:\n        msg.payload.HwExpansionRelay1 = \"ManualOn\";\n        break;\n    case 2:\n        msg.payload.HwExpansionRelay1 = \"Critical BattOk\";\n        break;\n    case 3:\n        msg.payload.HwExpansionRelay1 = \"Charging On\";\n        break;\n    case 4:\n        msg.payload.HwExpansionRelay1 = \"Discharging On\";\n        break;\n    case 5:\n        msg.payload.HwExpansionRelay1 = \"Heating Required\";\n        break;\n    case 6:\n        msg.payload.HwExpansionRelay1 = \"Cooling Required\";\n        break;\n    case 7:\n        msg.payload.HwExpansionRelay1 = \"Run / Idle input\";\n        break;\n    case 8:\n        msg.payload.HwExpansionRelay1 = \"Charge / Normal input\";\n        break;\n    case 9:\n        msg.payload.HwExpansionRelay1 = \"Bypass Complete\";\n        break;\n    case 10:\n        msg.payload.HwExpansionRelay1 = \"Charging Limited\";\n        break;\n    case 11:\n        msg.payload.HwExpansionRelay1 = \"Discharging Limited\";\n        break;\n    case 12:\n        msg.payload.HwExpansionRelay1 = \"Critical Recovery\";\n        break;\n    case 13:\n        msg.payload.HwExpansionRelay1 = \"Critical PulseOn\";\n        break;\n    case 14:\n        msg.payload.HwExpansionRelay1 = \"Critical PulseOff\";\n        break;\n    case 105:\n        msg.payload.HwExpansionRelay1 = \"Critical Fault\";\n        break;\n    case 16:\n        msg.payload.HwExpansionRelay1 = \"Critical PrechargeTimer\";\n        break;\n    default:\n        msg.payload.HwExpansionRelay1 = \"Buggered\";\n}\n\nswitch(msg.payload.HwExpansionInput1) {\n    case 0:\n        msg.payload.HwExpansionInput1 = \"None\";\n        break;\n    case 1:\n        msg.payload.HwExpansionInput1 = \"Run / Idle mode\";\n        break;\n    case 2:\n        msg.payload.HwExpansionInput1 = \"Charge / Normal mode\";\n        break;\n    case 3:\n        msg.payload.HwExpansionInput1 = \"Critical contact sensor - On\";\n        break;\n    case 4:\n        msg.payload.HwExpansionInput1 = \"Critical contact sensor - Fault\";\n        break;\n    default:\n        msg.payload.HwExpansionInput1 = \"Buggered\";\n}\n\nreturn msg;","outputs":1,"noerr":0,"x":970,"y":2720,"wires":[["9168d490.857088"]]},{"id":"9168d490.857088","type":"debug","z":"703f4458.ff2d1c","name":"","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","x":1330,"y":2720,"wires":[]},{"id":"5b2d3d18.595e24","type":"function","z":"703f4458.ff2d1c","name":"Msg_6132_StatusComms","func":"var Packet = global.get('binary_parser');\nvar buf = msg.payload;\n\nvar typea = new Packet()\n\n\t\t.skip(8)\n\t\t.uint32le('SystemTime') // Epoch\n\t\t.uint8('SystemOpStatus') /* Choices\n\t\t\t\tSimulator = 0,   \t  // LED = rainbow pulse\n\t\t\t\tIdle = 1,        \t  // LED = green slow pulse\n\t\t\t\tDischarging = 2, \t  // LED = green solid \n\t\t\t\tSoC Empty = 3,   \t  // LED = green double blink\n\t\t\t\tCharging = 4,    \t  // LED = blue slow pulse\n\t\t\t\tFull = 5,        \t  // LED = blue double blink\n\t\t\t\tTimeout = 6,     \t  // LED = red solid\n\t\t\t\tCritical Pending = 7, // LED = red fast pulse\n\t\t\t\tCritical Offline = 8, // LED = red slow pulse\n\t\t\t\tMqtt Offline = 9,     // LED = white blink\n\t\t\t\tAuth Setup = 10,      // LED = white solid\n\t\t\t\tShunt Timeout = 11,   // LED = red solid  \t*/\n\t\t.uint8('SystemAuthMode') /* Choices\n\t\t\t\tDefault = 0,\n\t\t\t\tTechnician = 1,\n\t\t\t\tFactory = 2, */\n\t\t.int16le('SystemAuthToken')\n\t\t.int16le('SystemAuthRejectTicks')\n\t\t.uint8('WifiState') /* Choices WifiOpStates\n\t\t\t\tBroadcast Start = 0,\n\t\t\t\tBroadcast Prep = 1,\n\t\t\t\tBroadcast TxSetup = 2,\n\t\t\t\tBroadcast Running = 3,\n\t\t\t\tUsbCmd Start = 4,\n\t\t\t\tUsbCmd Running = 5,\n\t\t\t\tUsbCmd PassThru = 6,\n\t\t\t\tUsbProg Start = 7,\n\t\t\t\tUsbProg Running = 8,\n\t\t\t\tUsbProg PassThru = 9,\n\t\t\t\tOffline Start = 10,\n\t\t\t\tOffline Running = 11,\n\t\t\t\tOffline Stop = 12,\n\t\t\t\tLimited Start = 13,\n\t\t\t\tLimited Prep = 14,\n\t\t\t\tLimited Running = 15,\n\t\t\t\tJoinAp Start = 16,\n\t\t\t\tJoinAp Running = 17,\t*/\t\t\n\t\t.uint8('WifiTxCmdTicks') \n\t\t.uint8('WifiRxCmdTicks') \n\t\t.uint8('WifiRxUnknownTicks') \n\t\t.uint8('CanbusOpStatus') /* Choices \n\n\t\t\t\t \t*/\t\t\n\t\t.uint8('CanbusRxStatusTicks')\n\t\t.uint8('CanbusRxUnknownTicks')\n\t\t.uint8('CanbusRxStatusTicks')\n\t\t.uint8('ShuntPollerMode') /* Choices ShuntPollerModes\n\t\t\t\tIdle Start = 0,\n\t\t\t\tIdle = 1,\n\t\t\t\tSync Start = 2,\n\t\t\t\tSync Running = 3,\n\t\t\t\tNormal = 4,\n\t\t\t\tShuntMon2 SetupStart = 5,\n\t\t\t\tShuntMon2 SetupRunning = 6,\n\t\t\t\tShuntMon2 Normal = 7, */\n\t\t.uint8('ShuntStatus') /* Choices  ShuntStatuses\n\t\t\t\tTimeout = 0,\n\t\t\t\tDischarging = 1,\n\t\t\t\tIdle = 2,\n\t\t\t\tCharging = 4 */\n\t\t.uint8('ShuntRxAmpTicks')\n\t\t.uint8('ShuntTxAmpTicks')\n\t\t.uint8('CmuPollerMode') \t    /* Choices\n\t\t\t\tIdle = 0,\n\t\t\t\tNormal = 1,\n\t\t\t\tCollection Start = 2,\n\t\t\t\tCollection Running = 3,\n\t\t\t\tSync Start = 4,\n\t\t\t\tSync Running = 5,\n\t\t\t\tNetworkTest Start = 6,\n\t\t\t\tNetworkTest Running = 9,\n\t\t\t\tBypassTest Start = 7,\n\t\t\t\tBypassTest Running = 8,\n\t\t\t\tRebootAll Start = 10,\n\t\t\t\tRebooting AllDevices = 11,\n\t\t\t\tSimulator Start = 12,\n\t\t\t\tSimulator Running = 13, */\n\t\t\t.uint8('CmuOpStatus') /* Choices */\n\t\t\t.uint8('CmuTxCmdTicks')\n\t\t\t.uint8('CmuRxCmdTicks')\n\nmsg.payload = typea.parse(buf);\n\n// convert date(s)\nmsg.payload.SystemTime = new Date(msg.payload.SystemTime*1000);\n\nswitch(msg.payload.SystemOpStatus) {\n    case 0:\n        msg.payload.SystemOpStatus = \"Simulator\";\n        break;\n    case 1:\n        msg.payload.SystemOpStatus = \"Idle\";\n        break;\n    case 2:\n        msg.payload.SystemOpStatus = \"Discharging\";\n        break;\n    case 3:\n        msg.payload.SystemOpStatus = \"SoC Empty\";\n        break;\n    case 4:\n        msg.payload.SystemOpStatus = \"Charging\";\n        break;\n    case 5:\n        msg.payload.SystemOpStatus = \"Full\";\n        break;\n    case 6:\n        msg.payload.SystemOpStatus = \"Timeout\";\n        break;\n    case 7:\n        msg.payload.SystemOpStatus = \"Critical Pending\";\n        break;\n    case 8:\n        msg.payload.SystemOpStatus = \"Critical Offline\";\n        break;\n    case 9:\n        msg.payload.SystemOpStatus = \"Mqtt Offline\";\n        break;\n    case 10:\n        msg.payload.SystemOpStatus = \"Auth Setup\";\n        break;\n    case 11:\n        msg.payload.SystemOpStatus = \"Shunt Timeout\";\n        break;\n    default:\n        msg.payload.SystemOpStatus = \"Buggered\";\n}\n\nswitch(msg.payload.SystemAuthMode) {\n    case 0:\n        msg.payload.SystemAuthMode = \"Default\";\n        break;\n    case 1:\n        msg.payload.SystemAuthMode = \"Technician\";\n        break;\n    case 2:\n        msg.payload.SystemAuthMode = \"Factory\";\n        break;\n    default:\n        msg.payload.SystemAuthMode = \"Buggered\";\n}\n\nswitch(msg.payload.WifiState) {\n    case 0:\n        msg.payload.WifiState = \"Broadcast Start\";\n        break;\n    case 1:\n        msg.payload.WifiState = \"Broadcast Prep\";\n        break;\n    case 2:\n        msg.payload.WifiState = \"Broadcast TxSetup\";\n        break;\n    case 3:\n        msg.payload.WifiState = \"Broadcast Running\";\n        break;\n    case 4:\n        msg.payload.WifiState = \"UsbCmd Start\";\n        break;\n    case 5:\n        msg.payload.WifiState = \"UsbCmd Running\";\n        break;\n    case 6:\n        msg.payload.WifiState = \"UsbCmd PassThru\";\n        break;\n    case 7:\n        msg.payload.WifiState = \"UsbProg Start\";\n        break;\n    case 8:\n        msg.payload.WifiState = \"UsbProg Running\";\n        break;\n    case 9:\n        msg.payload.WifiState = \"UsbProg PassThru\";\n        break;\n    case 10:\n        msg.payload.WifiState = \"Offline Start\";\n        break;\n    case 11:\n        msg.payload.WifiState = \"Offline Running\";\n        break;\n    case 12:\n        msg.payload.WifiState = \"Offline Stop\";\n        break;\n    case 13:\n        msg.payload.WifiState = \"Limited Start\";\n        break;\n    case 14:\n        msg.payload.WifiState = \"Limited Prep\";\n        break;\n    case 15:\n        msg.payload.WifiState = \"Limited Running\";\n        break;\n    case 16:\n        msg.payload.WifiState = \"JoinAp Start\";\n        break;\n    case 17:\n        msg.payload.WifiState = \"JoinAp Running\";\n        break;\n    default:\n        msg.payload.WifiState = \"Buggered\";\n}\n\nswitch(msg.payload.ShuntPollerMode) {\n    case 0:\n        msg.payload.ShuntPollerMode = \"Idle Start\";\n        break;\n    case 1:\n        msg.payload.ShuntPollerMode = \"Idle\";\n        break;\n    case 2:\n        msg.payload.ShuntPollerMode = \"Sync Start\";\n        break;\n    case 3:\n        msg.payload.ShuntPollerMode = \"Sync Running\";\n        break;\n    case 4:\n        msg.payload.ShuntPollerMode = \"Normal\";\n        break;\n    case 5:\n        msg.payload.ShuntPollerMode = \"ShuntMon2 SetupStart\";\n        break;\n    case 6:\n        msg.payload.ShuntPollerMode = \"ShuntMon2 SetupRunning\";\n        break;\n    case 7:\n        msg.payload.ShuntPollerMode = \"ShuntMon2 Normal\";\n        break;\n    default:\n        msg.payload.ShuntPollerMode = \"Buggered\";\n}\n\nswitch(msg.payload.ShuntStatus) {\n    case 0:\n        msg.payload.ShuntStatus = \"Timeout\";\n        break;\n    case 1:\n        msg.payload.ShuntStatus = \"Discharging\";\n        break;\n    case 2:\n        msg.payload.ShuntStatus = \"Idle\";\n        break;\n    case 4:\n        msg.payload.ShuntStatus = \"Charging\";\n        break;\n    default:\n        msg.payload.ShuntStatus = \"Buggered\";\n}\n/*\nswitch(msg.payload.CmuPollerMode) {\n    case 0:\n        msg.payload.CmuPollerMode = \"Idle\";\n        break;\n    case 1:\n        msg.payload.CmuPollerMode = \"Normal\";\n        break;\n    case 2:\n        msg.payload.CmuPollerMode = \"Collection Start\";\n        break;\n    case 3:\n        msg.payload.CmuPollerMode = \"Collection Running\";\n        break;\n    case 4:\n        msg.payload.CmuPollerMode = \"Sync Start\";\n        break;\n    case 5:\n        msg.payload.CmuPollerMode = \"Sync Running\";\n        break;\n    case 6:\n        msg.payload.CmuPollerMode = \"NetworkTest Start\";\n        break;\n    case 7:\n        msg.payload.CmuPollerMode = \"NetworkTest Running\";\n        break;\n    case 8:\n        msg.payload.CmuPollerMode = \"BypassTest Start\";\n        break;\n    case 9:\n        msg.payload.CmuPollerMode = \"BypassTest Running\";\n        break;\n    case 10:\n        msg.payload.CmuPollerMode = \"RebootAll Start\";\n        break;\n    case 11:\n        msg.payload.CmuPollerMode = \"Rebooting AllDevices\";\n        break;\n    case 12:\n        msg.payload.CmuPollerMode = \"Simulator Start\";\n        break;\n    case 13:\n        msg.payload.CmuPollerMode = \"Simulator Running\";\n        break;\n    default:\n        msg.payload.CmuPollerMode = \"Buggered\";\n}\n*/\n\nreturn msg;","outputs":1,"noerr":0,"x":950,"y":2820,"wires":[["13f6ea98.acc1a5"]]},{"id":"13f6ea98.acc1a5","type":"debug","z":"703f4458.ff2d1c","name":"","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","x":1330,"y":2820,"wires":[]},{"id":"7210da08.ef75a4","type":"comment","z":"703f4458.ff2d1c","name":"Based on Watchmon SW 1.0.30 UDP Outbound protocol","info":"All credit for the parsers to Daniel Römer\nBased on his grafpi project:\nhttp://diytechandrepairs.nu/raspberry-solar/\n\nBatrium WatchMon 4\n\nThe machine running node red must be able \nto acces port 18542 UDP IPv4\n\n","x":779,"y":51,"wires":[]},{"id":"7f0b8d22.9e4c94","type":"ui_text","z":"703f4458.ff2d1c","group":"ef73892e.465d28","order":0,"width":"3","height":"2","name":"GroupMinCellVolt","label":"Min Cell Voltage","format":"{{msg.payload.GroupMinCellVolt}}v","layout":"col-center","x":2110,"y":540,"wires":[]},{"id":"de8d1891.dc7848","type":"ui_text","z":"703f4458.ff2d1c","group":"ef73892e.465d28","order":0,"width":"3","height":"2","name":"GroupMaxCellVolt","label":"Max Cell Voltage","format":"{{msg.payload.GroupMaxCellVolt}}v","layout":"col-center","x":2110,"y":580,"wires":[]},{"id":"ef73892e.465d28","type":"ui_group","z":"","name":"Default","tab":"2ee2c4cd.da372c","disp":false,"width":"6","collapse":false},{"id":"2ee2c4cd.da372c","type":"ui_tab","z":"","name":"Dashboard","icon":"dashboard","order":2}]
